#include <check.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "../s21_string.h"
#define BUF_SIZE1 16


#define TEST_SSCANF(str, format, s21_dest, orig_dest)      \
  do {                                                     \
    int orig_scanf_res = sscanf(str, format, orig_dest);   \
    int s21_scanf_res = s21_sscanf(str, format, s21_dest); \
    ck_assert_mem_eq(s21_dest, orig_dest, BUF_SIZE1);       \
    ck_assert_int_eq(s21_scanf_res, orig_scanf_res);       \
  } while (0)

static char buf_s21[BUF_SIZE1] = {0}, buf_std[BUF_SIZE1] = {0};
/////////////////////////////////////////////////////////////////////////////////////////

#test string_insert_4
  char s1[30] = "abcdefghij";
  char s3[] = "\'I WAS HERE\'";
  char s4[] = "abc\'I WAS HERE\'defghij";
  s21_size_t num = 3;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
    free(s2);

#test string_insert_5
  char s1[30] = "abc";
  char s3[] = "333";
  char *s4 = s21_NULL;
  s21_size_t num = 10;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
    free(s2);

#test string_insert_6
  char s1[30] = "hello, world!";
  char s3[] = "hELLO, WORLD!";
  char *s4 = s21_NULL;
  s21_size_t num = -1;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
    free(s2);


#test string_insert_7
  char *s1 = s21_NULL;
  char *s3 = s21_NULL;
  char *s4 = s21_NULL;
  s21_size_t num = 0;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
    free(s2);

#test string_insert_8
  char s1[30] = "";
  char s3[] = "";
  char s4[] = "";
  s21_size_t num = 0;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
  free(s2);

#test string_insert_9
  char s1[] = "wtf";
  char *s3 = s21_NULL;
  char *s4 = s21_NULL;
  s21_size_t num = 0;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s4, s2);
    free(s2);


#test string_insert_10
  char s1[] = "";
  char *s3 = s21_NULL;
  char *s4 = s21_NULL;
  s21_size_t num = 0;
  char *s2 = s21_insert(s1, s3, num);
  ck_assert_pstr_eq(s2, s4);
    free(s2);

#test string_memchr_1
  char s21_str[] = "";
  char s21_c = '\0';
  char str[] = "";
  char c = '\0';
  s21_size_t n = 0;

  ck_assert_pstr_eq(s21_memchr(s21_str, s21_c, n), memchr(str, c, n));


#test string_memchr_2
char s21_str[] = "someIntellectualText";
  char s21_c = '\0';
  char str[] = "someIntellectualText";
  char c = '\0';
  s21_size_t n = 5;

  ck_assert_pstr_eq(s21_memchr(s21_str, s21_c, n), memchr(str, c, n));


#test string_memchr_3
 char s21_str[] = "hello";
  char s21_c = 'H';
  char str[] = "hello";
  char c = 'H';
  s21_size_t n = 5;

  ck_assert_pstr_eq(s21_memchr(s21_str, s21_c, n), memchr(str, c, n));



#test string_memchr_4
  char str[] = "Hello, world!";
  int ch = 65;
  s21_size_t len = strlen(str);
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));


#test string_memchr_5
  char str[] = "Hello, world!";
  int ch = 'l';
  s21_size_t len = 10;
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));


#test string_memchr_6
  char str[] = "Hello, world!";
  int ch = 'w';
  s21_size_t len = 5;
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));

#test string_memchr_7
  char str[] = "69917020";
  int ch = '3';
  s21_size_t len = strlen(str);
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));

#test string_memchr_8
  char str[] = "69917020";
  int ch = '6';
  s21_size_t len = 0;
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));

#test string_memchr_9
  char str[] = "69917020";
  int ch = 'g';
  s21_size_t len = strlen(str);
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));

#test string_memchr_10
  char str[] = "69917020";
  int ch = '\0';
  s21_size_t len = 9;
  ck_assert_ptr_eq(memchr(str, ch, len), s21_memchr(str, ch, len));


#test string_memcpy_1
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "Good";
  s21_size_t n = 4;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));

#test string_memcpy_2
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 1;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));


#test string_memcpy_3
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "f";
  s21_size_t n = 0;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));



#test string_memcpy_4
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "Hi";
  s21_size_t n = 3;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));


#test string_memcpy_5
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] = "Hi";
  s21_size_t n = 2;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));



#test string_memcpy_6
  char s1[] = "";
  char s2[] = "";
  char s3[] = "love";
  s21_size_t n = 0;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));


#test string_memcpy_7
  char s1[] = "new_strnew_string";
  char s2[] = "new_strnew_string";
  char s3[] = "new_string";
  s21_size_t n = strlen(s3);
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));



#test string_memcpy_8
  char s1[] = "699\017020";
  char s2[] = "699\017020";
  char s3[] = "com";
  s21_size_t n = 3;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));



#test string_memcpy_9
  char s1[] = "69917020";
  char s2[] = "69917020";
  char s3[] = "c";
  s21_size_t n = 1;
  ck_assert_str_eq(memcpy(s1, s3, n), s21_memcpy(s2, s3, n));



#test string_memset_1
    char str[10] = "Hello";
  char c = 'w';
  s21_size_t len = strlen(str);
  ck_assert_str_eq(memset(str, c, len), s21_memset(str, c, len));




#test string_memset_2
  char str[] = "Hello";
  char c = 66;
  s21_size_t len = 2;
  ck_assert_str_eq(memset(str, c, len), s21_memset(str, c, len));





#test string_memset_3
  char str[] = "Hello";
  char c = 10;
  s21_size_t len = 0;
  ck_assert_str_eq(memset(str, c, len), s21_memset(str, c, len));


#test string_memset_4
  char s1[] = "";
  char s2[] = "";
  int ch = '\0';
  s21_size_t n = 0;
  ck_assert_str_eq(memset(s1, ch, n), s21_memset(s2, ch, n));



#test string_memset_5
  char s1[] = "Hello";
  char s2[] = "Hello";
  int ch = '\0';
  s21_size_t n = 4;
  ck_assert_str_eq(memset(s1, ch, n), s21_memset(s2, ch, n));



#test string_memset_6
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  int ch = 80;
  s21_size_t n = 7;
  ck_assert_str_eq(memset(s1, ch, n), s21_memset(s2, ch, n));






#test string_strchr_1
   char str[100] = "Hello";
  char c = 'e';
  ck_assert_pstr_eq(strchr(str, c), strchr(str, c));



#test string_strchr_2
    char str[100] = "Hello, world!";
  char c = 'o';
  ck_assert_pstr_eq(strchr(str, c), s21_strchr(str, c));

#test string_strchr_3
char str[100] = "Hello, world!";
  char c = 'h';
  ck_assert_pstr_eq(strchr(str, c), s21_strchr(str, c));




#test string_strchr_4
  char str[100] = "Hello, world!";
  char c = 'H';
  ck_assert_pstr_eq(strchr(str, c), s21_strchr(str, c));




#test string_strchr_5
  char str[100] = "Hello, world!";
  char c = 69;
  ck_assert_pstr_eq(strchr(str, c), s21_strchr(str, c));



#test string_strchr_6
  char s[] = "Hello, world!";
  int ch = 'w';
  ck_assert_pstr_eq(strchr(s, ch), s21_strchr(s, ch));


#test string_strchr_7
  char s[] = "Hello, world!";
  int ch = '0';
  ck_assert_pstr_eq(strchr(s, ch), s21_strchr(s, ch));



#test string_strchr_8
  char s[] = "Hello, world!";
  int ch = 'm';
  ck_assert_pstr_eq(strchr(s, ch), s21_strchr(s, ch));

#test string_strtok_1
    char str[100] = "Hello hello Hello";
  char str1[100] = "hello";
  ck_assert_pstr_eq(strtok(str, str1), strtok(str, str1));


#test string_strtok_2
  char str[100] = "Hello hello Hello";
  char str1[100] = "Hello";
  ck_assert_pstr_eq(strtok(str, str1), s21_strtok(str, str1));



#test string_strtok_3
  char str[100] = "helloHellohelloHello";
  char str1[100] = "Hello";
  ck_assert_pstr_eq(strtok(str, str1), s21_strtok(str, str1));



#test string_strtok_4
  char str[100] = "Hello, world!";
  char str1[100] = "\0";
  ck_assert_pstr_eq(strtok(str, str1), s21_strtok(str, str1));




#test string_strtok_5
 char str[100] = "Hello, world!";
  char str1[100] = "l";
  ck_assert_pstr_eq(strtok(str, str1), s21_strtok(str, str1));




#test string_strtok_6
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  char s3[] =
      "My name is Polina. I hate this, maybe I'm not supposed for this.";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));


#test string_strtok_7
  char s1[] = "ABABABABABBABABABBABABABABABBA";
  char s2[] = "ABABABABABBABABABBABABABABABBA";
  char s3[] = "B";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));


#test string_strtok_8
  char s1[] = "\0ABABABABABBABABABBABABABABABBA";
  char s2[] = "\0ABABABABABBABABABBABABABABABBA";
  char s3[] = "A";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));



#test string_strtok_9
  char s1[] = "\0Hello, world!";
  char s2[] = "\0Hello, world!";
  char s3[] = "\0";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));



#test string_strtok_10
  char s1[] = "\0Hello, world!";
  char s2[] = "\0Hello, world!";
  char s3[] = "";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));


#test string_strtok_12
  char s1[] = "tuz-tuz-tuz";
  char s2[] = "tuz-tuz-tuz";
  char s3[] = "z-tuz-tuz";
  ck_assert_pstr_eq(strtok(s1, s3), s21_strtok(s2, s3));


#test string_strtok_13
  char s1[] = "Hello, world! And other people";
  char s2[] = "Hello, world! And other people";
  char s3[] = "\0Come here";
  char s4[] = "\0Come here";
  char s5[] = "";

  ck_assert_pstr_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  }
  ck_assert_pstr_eq(strtok(s3, s5), s21_strtok(s4, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));


#test string_strtok_14
  char s1[] = "Hello,       world! And other people";
  char s2[] = "Hello,       world! And other people";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = " o";

  ck_assert_pstr_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  }
  ck_assert_pstr_eq(strtok(s3, s5), s21_strtok(s4, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));



#test string_strtok_15
  char s1[] = "Hello,      worllllllllllld! And lother people      ";
  char s2[] = "Hello,      worllllllllllld! And lother people      ";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = " l";

  ck_assert_pstr_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  }
  ck_assert_pstr_eq(strtok(s3, s5), s21_strtok(s4, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));
  ck_assert_pstr_eq(strtok(s21_NULL, s5), s21_strtok(s21_NULL, s5));


#test string_strtok_16
  char s1[] = "Helllllllo,      worllllllllllld! And lother people      ";
  char s2[] = "Helllllllo,      worllllllllllld! And lother people      ";
  char s3[] = "Come here";
  char s4[] = "Come here";
  char s5[] = "l";
  char s6[] = " ";

  ck_assert_str_eq(strtok(s1, s5), s21_strtok(s2, s5));
  for (int i = 0; i < 5; i++) {
    ck_assert_pstr_eq(strtok(s21_NULL, s6), s21_strtok(s21_NULL, s6));
  }
  ck_assert_pstr_eq(strtok(s3, s6), s21_strtok(s4, s6));
  ck_assert_pstr_eq(strtok(s21_NULL, s6), s21_strtok(s21_NULL, s6));
  ck_assert_pstr_eq(strtok(s21_NULL, s6), s21_strtok(s21_NULL, s6));


#test string_strtok_17
  char s1[] = "ROROROROMA!!!!!!!!!";
  char s2[] = "ROROROROMA!!!!!!!!!";
  char s3[] = "R";
  strtok(s1, s3);
  strtok(NULL, s3);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);




#test string_strtok_18
  char s1[] = "AGONIA";
  char s2[] = "AGONIA";
  char s3[] = "A";
  strtok(s1, s3);
  strtok(NULL, s3);
  strtok(NULL, s3);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);



#test string_strtok_19
  char s1[] = "MYPHONENUM68697317172648";
  char s2[] = "MYPHONENUM68697317172648";
  char s3[] = "MYPHONENUM6869";
  char *s4 = strtok(s1, s3);
  char *s6 = strtok(s21_NULL, s3);

  char *s5 = s21_strtok(s2, s3);
  char *s7 = s21_strtok(s21_NULL, s3);

  ck_assert_pstr_eq(s1, s2);
  ck_assert_pstr_eq(s4, s5);
  ck_assert_pstr_eq(s6, s7);


#test string_strtok_20
  char s1[] = "AAAAAAGOONIAAAAA";
  char s2[] = "AAAAAAGOONIAAAAA";
  char s3[] = "A";
  strtok(s1, s3);
  strtok(NULL, s2);
  strtok(NULL, s2);
  s21_strtok(s2, s3);
  s21_strtok(NULL, s3);
  s21_strtok(NULL, s3);
  ck_assert_pstr_eq(s1, s2);


#test string_strstr_1
  char s1[] = "Hello, world!";
  char s2[] = "Hello, world!";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));


#test string_strstr_2
  char s1[] = "Hello, world!";
  char s2[] = "Hello, P!";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_3
  char s1[] = "Hello, world!";
  char s2[] = "!";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_4
  char s1[] =
      "Hello, world!Hello, world!Hello, world!Hello, world!Hello, world!";
  char s2[] = "world";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_5
  char s1[] = "";
  char s2[] = "";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_6
  char s1[] = "Hello, world!";
  char s2[] = "";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_7
  char s1[] = "";
  char s2[] = "Hello, P!";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));




#test string_strstr_8
  char s1[] = "69917020";
  char s2[] = "0";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));



#test string_strstr_9
  char s1[] = "69917020";
  char s2[] = "\0";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));


#test string_strstr_10
  char s1[] = "69917020";
  char s2[] = "32859160 8v3489-74 tvc4y8719c n4[nqymu uv 4vm9cw";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));

#test string_strstr_11
  char s1[] = "1   345 345 345 345 345";
  char s2[] = "345";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));

#test string_strstr_12
  char s1[] = "sususususpicioussusususpicious";
  char s2[] = "susp";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));


#test string_strstr_13
  char s1[] = "sus";
  char s2[] = "suspi";
  ck_assert_pstr_eq(strstr(s1, s2), s21_strstr(s1, s2));


#test string_strrchr_1
  char s[] = "Hello, world!";
  int ch = 'h';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));

#test string_strrchr_2
  char s[] = "Hello, world!";
  int ch = '\0';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));


#test string_strrchr_3
  char s[] = "Hello, world!";
  int ch = ',';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));

#test string_strrchr_4
  char s[] = "Hello, world!";
  int ch = 33;
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));


#test string_strrchr_5
  char s[] = "Hello, Polina!";
  int ch = 'P';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));


#test string_strrchr_6
  char s[] = "Hello, world!";
  int ch = 'w';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));


#test string_strrchr_7
  char s[] = "Hello, world!";
  int ch = '0';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));


#test string_strrchr_8
  char s[] = "Hello, world!";
  int ch = 'm';
  ck_assert_pstr_eq(strrchr(s, ch), s21_strrchr(s, ch));



#test string_strpbrk_1
  char str[100] = "Hello, world!";
  char str1[100] = "world";
  ck_assert_pstr_eq(strpbrk(str, str1), strpbrk(str, str1));




#test string_strpbrk_2
  char str[100] = "Hello, world!";
  char str1[100] = "zavarushka";
  ck_assert_pstr_eq(strpbrk(str, str1), s21_strpbrk(str, str1));




#test string_strpbrk_3
  char str[100] = "Hello, world!";
  char str1[100] = "abc";
  ck_assert_pstr_eq(strpbrk(str, str1), s21_strpbrk(str, str1));






#test string_strpbrk_4
  char str[100] = "Hello, world!";
  char str1[100] = "";
  ck_assert_pstr_eq(strpbrk(str, str1), s21_strpbrk(str, str1));






#test string_strpbrk_5
  char s1[] = "";
  char s2[] = "";
  ck_assert_pstr_eq(strpbrk(s1, s2), s21_strpbrk(s1, s2));





#test string_strpbrk_6
  char s1[] = "1242434246364377659";
  char s2[] = "364377659";
  ck_assert_pstr_eq(strpbrk(s1, s2), s21_strpbrk(s1, s2));




#test string_strlen_1
 const char str[] = "Hellow world";
  ck_assert_int_eq(s21_strlen(str), strlen(str));

#test string_strlen_2
  char str[] =
      "I hate doing tests, it's not funny at all!!!!!!!!!!!!!!!!!!!!!!!!!";
  ck_assert_int_eq(strlen(str), s21_strlen(str));


#test string_strlen_3
  char str[] = "";
  ck_assert_int_eq(strlen(str), s21_strlen(str));


#test string_strlen_4
  const char str[] = "\0";
  ck_assert_int_eq(s21_strlen(str), strlen(str));


#test string_strlen_5
  const char str[] = "1234567890";
  ck_assert_int_eq(s21_strlen(str), strlen(str));


#test string_strlen_6
  const char str[] = "??$#@!@*";
  ck_assert_int_eq(s21_strlen(str), strlen(str));


#test string_strlen_7
  char str[] = "\0\0\0\0\n";
  ck_assert_int_eq(strlen(str), s21_strlen(str));


#test string_strlen_8
  char str[] = "";
  ck_assert_int_eq(strlen(str), s21_strlen(str));


#test string_strlen_10
  char str[] = "\t\t";
  ck_assert_int_eq(strlen(str), s21_strlen(str));

#test string_strlen_11
  char str[] = "\0test";
  ck_assert_int_eq(strlen(str), s21_strlen(str));


#test string_strlen_12
  char str[] = "wtf \0 wtf";
  ck_assert_int_eq(strlen(str), s21_strlen(str));



#test string_strcspn_1
  char str[100] = "Hello, world!";
  char str1[100] = "world";
  ck_assert_uint_eq(strcspn(str, str1), strcspn(str, str1));


#test string_strcspn_2
  char str[100] = "Hello, world!";
  char str1[100] = "zavarushka";
  ck_assert_uint_eq(strcspn(str, str1), s21_strcspn(str, str1));




#test string_strcspn_3
  char str[100] = "Hello, world!";
  char str1[100] = "hello, world!";
  ck_assert_uint_eq(strcspn(str, str1), s21_strcspn(str, str1));




#test string_strcspn_4
  char str[100] = "Hello, world!";
  char str1[100] = "abc";
  ck_assert_uint_eq(strcspn(str, str1), s21_strcspn(str, str1));


#test string_strcspn_5
  char s1[] = "Hello, world!";
  char s2[] = "";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));



#test string_strcspn_6
  char s1[] = "6";
  char s2[] = "67";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));




#test string_strcspn_7
  char s1[] = "69917020";
  char s2[] = "69917020";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));



#test string_strcspn_8
  char s1[] = "69917020";
  char s2[] = "69917020";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));


#test string_strcspn_9
  char s1[] = "699";
  char s2[] = "69917020";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));


#test string_strcspn_10
  char s1[] = "69917020";
  char s2[] = "699";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));



#test string_strcspn_11
  char s1[] = "";
  char s2[] = "";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));


#test string_strcspn_12
  char s1[] = "69917020";
  char s2[] = "6991702H";
  ck_assert_int_eq(strcspn(s1, s2), s21_strcspn(s1, s2));







#test string_strncat_2
  char str1[256] = "This is a test string";
  char str1_copy[256] = "This is a test string";
  const char str2[4] = "";

  s21_strncat(str1, str2, 4);
  strncat(str1_copy, str2, 4);
  ck_assert_str_eq(str1, str1_copy);



#test string_strncat_3
  char str1[100] = "Hello, ";
  char str1_copy[100] = "Hello, ";
  const char str2[] = "world!";

  s21_strncat(str1, str2, s21_strlen(str2));
  strncat(str1_copy, str2, s21_strlen(str2));
  ck_assert_str_eq(str1, str1_copy);



#test string_strncat_4
  char str1[] = "\0\0";
  char str1_copy[] = "\0\0";
  const char str2[] = "!";

  s21_strncat(str1, str2, s21_strlen(str2));
  strncat(str1_copy, str2, s21_strlen(str2));
  ck_assert_str_eq(str1, str1_copy);




#test string_strncat_5
  char s1[30] = "";
  char s2[30] = "";
  char s3[] = "Hello, world!";
  s21_size_t n = 13;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_6
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] =
      "My name is Polina. I hate this, maybe I'm not supposed for this.";
  s21_size_t n = 6;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_7
  char s1[30] = "";
  char s2[30] = "";
  char s3[] = "Hello, world!";
  s21_size_t n = 3;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_8
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "My name is Polina.";
  s21_size_t n = 2;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_9
  char s1[100] = "";
  char s2[100] = "";
  char s3[] = "";
  s21_size_t n = 10;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));

#test string_strncat_10
  char s1[100] = "Hello\0, world!";
  char s2[100] = "Hello\0, world!";
  char s3[] = "My name is\0 Polina.";
  s21_size_t n = 15;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_11
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 1;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));

#test string_strncat_12
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0";
  s21_size_t n = 0;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_13
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "\0\0\0\0";
  s21_size_t n = 4;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));


#test string_strncat_14
  char s1[100] = "Hello, world!";
  char s2[100] = "Hello, world!";
  char s3[] = "";
  s21_size_t n = 2;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));

#test string_strncat_15
  char s1[100] = "Hello, world!\0\0\0";
  char s2[100] = "Hello, world!\0\0\0";
  char s3[] = "My name is Polina.";
  s21_size_t n = 0;
  ck_assert_pstr_eq(strncat(s1, s3, n), s21_strncat(s2, s3, n));



#test string_strncmp_1
  char str[] = "Hello, world!";
  char str1[] = "Hello, world!";
  s21_size_t len = strlen(str);
  ck_assert_int_eq(strncmp(str, str1, len), s21_strncmp(str, str1, len));

#test string_strncmp_2
  char str[] = "b";
  char str1[] = "a";
  ck_assert_int_eq(strncmp(str, str1, 1), s21_strncmp(str, str1, 1));

#test string_strncmp_3
  char str[] = "a";
  char str1[] = "b";
  ck_assert_int_eq(strncmp(str, str1, 1), s21_strncmp(str, str1, 1));

#test string_strncmp_6
  char s1[] = "1242434246364377659";
  char s2[] = "1242434246364377659";
  s21_size_t n = 19;
  int n1 = strncmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_strncmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_strncmp_7
  char s1[] = "1242434246364377659";
  char s2[] = "1242434246364377659";
  s21_size_t n = 2;
  int n1 = strncmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_strncmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);


#test string_strncmp_8
  char s1[] = "g124243425";
  char s2[] = "124243424";
  s21_size_t n = 0;
  int n1 = strncmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_strncmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_strncmp_9
  char s1[] = "";
  char s2[] = "";
  s21_size_t n = 1;
  int n1 = strncmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_strncmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);



#test string_strncpy_1
    char str[100] = "Hello";
  char str1[100] = "world";
  ck_assert_str_eq(strncpy(str, str1, 3), strncpy(str, str1, 3));





#test string_strncpy_2
 char str[100] = "Hello, world!";
  char str1[100] = "zavarushka";
  ck_assert_str_eq(strncpy(str, str1, strlen(str1)),
                   s21_strncpy(str, str1, strlen(str1)));




#test string_strncpy_3
  char str[100] = "Hello, world!";
  char str1[100] = "hello, world!";
  ck_assert_str_eq(strncpy(str, str1, 13), s21_strncpy(str, str1, 13));




#test string_strncpy_4
  char str[100] = "Hello, world!";
  char str1[100] = "hello, \0 world!";
  ck_assert_str_eq(strncpy(str, str1, 15), s21_strncpy(str, str1, 15));



#test string_strncpy_5
  char str[100] = "Hello, world!";
  char str1[100] = "Hello,\n world";
  ck_assert_str_eq(strncpy(str, str1, 10), s21_strncpy(str, str1, 10));




#test string_strncpy_6
  char s1[5] = "";
  char s2[5] = "";
  char s3[] = "\0";
  s21_size_t n = 1;
  ck_assert_pstr_eq(strncpy(s1, s3, n), s21_strncpy(s2, s3, n));

#test string_strerror_1
for (int i = 0; i < 150; i++) {
    ck_assert_str_eq(strerror(i), s21_strerror(i));
  }

#test string_strerror_2
int n = -1;
  ck_assert_str_eq(strerror(n), s21_strerror(n));


#test string_trim_1
    char s1[30] = "-?hello, world!";
    char s3[] = "!?-";
    char s4[] = "hello, world";
    char *s2 = s21_trim(s1, s3);
    ck_assert_pstr_eq(s4, s2);
    if (s2) free(s2);

#test string_trim_2
  char s1[30] = "";
  char s3[] = "";
  char *s4 = "";
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_3
    char *s1 = s21_NULL;
  char s3[] = "";
  char *s4 = s21_NULL;
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_4
   char s1[30] = "!!!abcdefghij!?!";
  char s3[] = "!?";
  char s4[] = "abcdefghij";
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_5
  char s1[30] = "abc";
  char s3[] = "333";
  char *s4 = "abc";
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_6
    char s1[30] = "hello, world!";
  char s3[] = "?!";
  char *s4 = "hello, world";
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_7
     char *s1 = s21_NULL;
  char *s3 = s21_NULL;
  char *s4 = s21_NULL;
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);

#test string_trim_8
      char s1[30] = "";
  char s3[] = "";
  char s4[] = "";
  char *s2 = s21_trim(s1, s3);
  ck_assert_pstr_eq(s4, s2);
  if (s2) free(s2);



#test string_to_upper_1
char *str = "hello world";
  char *expected = "HELLO WORLD";
  char *result = s21_to_upper(str);
  ck_assert_str_eq(result, expected);
  free(result);


#test string_to_upper_2
    char s1[30] = "\nh\t\\g123123";
    char *s2 = s21_to_upper(s1);
    char s3[] = "\nH\t\\G123123";
    ck_assert_pstr_eq(s3, s2);
    if (s2) free(s2);

#test string_to_upper_3
  char *str = "HELLO WORLD";
  char *expected = "HELLO WORLD";
  char *result = s21_to_upper(str);
  ck_assert_str_eq(result, expected);
  free(result);


#test string_to_upper_4
    char s1[30] = "";
    char *s2 = s21_to_upper(s1);
    char s3[] = "";
    ck_assert_pstr_eq(s3, s2);
    if (s2) free(s2);

#test string_to_upper_5
     char s1[30] = "abcdefghijklmnopqrstuvwxyz";
    char *s2 = s21_to_upper(s1);
    char s3[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    ck_assert_pstr_eq(s3, s2);
    if (s2) free(s2);

#test string_to_upper_6
     char s1[30] = "_?};!234";
    char *s2 = s21_to_upper(s1);
    char s3[] = "_?};!234";
    ck_assert_pstr_eq(s3, s2);
    if (s2) free(s2);

#test string_to_upper_7
    char *s1 = s21_NULL;
    char *s2 = s21_to_upper(s1);
    char *s3 = s21_NULL;
    ck_assert_pstr_eq(s3, s2);
    if (s2) free(s2);

#test string_to_lower_1
 char *str = "HELLO WORLD";
  char *expected = "hello world";
  char *result = s21_to_lower(str);
  ck_assert_str_eq(result, expected);
  free(result);


#test string_to_lower_2
char *str = "hello world";
  char *expected = "hello world";
  char *result = s21_to_lower(str);
  ck_assert_str_eq(result, expected);
  free(result);


#test string_to_lower_3
char *str = "";
  char *expected = "";
  char *result = s21_to_lower(str);
  ck_assert_str_eq(result, expected);
  free(result);


#test string_to_lower_4
char s1[30] = "";
  char s3[] = "";
  char *s2 = s21_to_lower(s3);
  ck_assert_pstr_eq(s1, s2);
  if (s2) free(s2);

#test string_to_lower_5
  char s1[30] = "abcdefghijklmnopqrstuvwxyz";
  char s3[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  char *s2 = s21_to_lower(s3);
  ck_assert_pstr_eq(s1, s2);
  if (s2) free(s2);

#test string_to_lower_6
  char s1[30] = "_?};!234";
  char s3[] = "_?};!234";
  char *s2 = s21_to_lower(s3);
  ck_assert_pstr_eq(s1, s2);
  if (s2) free(s2);
#test string_to_lower_7
  char *s1 = s21_NULL;
  char *s3 = s21_NULL;
  char *s2 = s21_to_lower(s3);
  ck_assert_pstr_eq(s1, s2);
  if (s2) free(s2);


#test string_memcmp_1
  char str[] = "Hello, world!";
  char str1[] = "Hello, world!";
  s21_size_t len = strlen(str);
  ck_assert_int_eq(memcmp(str, str1, len), s21_memcmp(str, str1, len));




#test string_memcmp_4
    char str[10] = "Hello";
  char str1[10] = "world!";
  s21_size_t len = strlen(str);
  ck_assert_str_eq(memcpy(str, str1, len), s21_memcpy(str, str1, len));


#test string_memcmp_5
  char str[] = "Hello";
  char str1[] = "world!";
  s21_size_t len = 0;
  ck_assert_str_eq(memcpy(str, str1, len), s21_memcpy(str, str1, len));



#test string_memcmp_6
     char s1[] = "69917020";
  char s2[] = "69917020";
  s21_size_t n = 0;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_7
      char s1[] = "69917020";
  char s2[] = "69917020";
  s21_size_t n = 2;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_8
      char s1[] = "69917020";
  char s2[] = "69917020";
  s21_size_t n = 8;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_9
     char s1[] = "69917020";
  char s2[] = "69917020";
  s21_size_t n = 9;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_10
      char s1[] = "69917020";
  char s2[] = "6991702H";
  s21_size_t n = 7;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_11
      char s1[] = "69917020";
  char s2[] = "6991702H";
  s21_size_t n = 4;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_12
      char s1[] = "69917020";
  char s2[] = "6991702H";
  s21_size_t n = 8;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

#test string_memcmp_13
      char s1[] = "69917020";
  char s2[] = "6991702H";
  s21_size_t n = 9;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);
#test string_memcmp_14
      char s1[] =
      "The memcmp() function compares the first n bytes (each interpreted as "
      "unsigned char) of the memory areas s1 and s2.";
  char s2[] =
      "The memcmp() function compares the first n bytes (each interpreted as "
      "unsigned char) of the memory areas s1 and s2.";
  s21_size_t n = 115;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

  #test string_memcmp_15
      char s1[] =
      "The memcmp() function compares the first n bytes (each interpreted as "
      "unsigned char) of the memory areas s1 and s2.";
  char s2[] =
      "The memcmp() function compares the first n bytes (each interpreted as "
      "unsigned char) of the memory areas s1 and s2";
  s21_size_t n = 115;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);

  #test string_memcmp_16
     char s1[] = "";
  char s2[] = "";
  s21_size_t n = 0;
  int n1 = memcmp(s1, s2, n);
  n1 = n1 > 0 ? 1 : n1 == 0 ? 0 : -1;
  int n2 = s21_memcmp(s1, s2, n);
  n2 = n2 > 0 ? 1 : n2 == 0 ? 0 : -1;
  ck_assert_int_eq(n1, n2);




#include <check.h>
#include <stdlib.h>
#include <stdio.h>
#include "../s21_string.h"

#test sprintf_s
    char bufferTrue[500];
    char bufferTest[500];
    char *i = "Hello world";

    sprintf(bufferTrue, "Symbol: |%s|", i);
    s21_sprintf(bufferTest, "Symbol: |%s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-s|", i);
    s21_sprintf(bufferTest, "Symbol: |%-s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-10s|", i);
    s21_sprintf(bufferTest, "Symbol: |%s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-10s|", i);
    s21_sprintf(bufferTest, "Symbol: |%s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-100s|", i);
    s21_sprintf(bufferTest, "Symbol: |%-100s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%100s|", i);
    s21_sprintf(bufferTest, "Symbol: |%100s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%1s|", i);
    s21_sprintf(bufferTest, "Symbol: |%1s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%10.3s|", i);
    s21_sprintf(bufferTest, "Symbol: |%10.3s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%10.0s|", i);
    s21_sprintf(bufferTest, "Symbol: |%10.0s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%.0s|", i);
    s21_sprintf(bufferTest, "Symbol: |%.0s|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);



#test sprintf_c_1
    char bufferTrue[500];
    char bufferTest[500];
    char i = 'a';

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_c_2
    char bufferTrue[500];
    char bufferTest[500];
    char i = '\0';

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_c_3
    char bufferTrue[500];
    char bufferTest[500];
    char i = '\n';

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%-10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%-10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%10c|", i);
    s21_sprintf(bufferTest, "Symbol: |%10c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "Symbol: |%c|", i);
    s21_sprintf(bufferTest, "Symbol: |%c|", i);
    ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_d
    char bufferTrue[500];
    char bufferTest[500];

    for (int i = -5001; i < 5001; i++){
        sprintf(bufferTrue, "%d", i);
        s21_sprintf(bufferTest, "%d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10d", i);
        s21_sprintf(bufferTest, "%-10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+d", i);
        s21_sprintf(bufferTest, "%+d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10d", i);
        s21_sprintf(bufferTest, "%+10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% d", i);
        s21_sprintf(bufferTest, "% d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-d", i);
        s21_sprintf(bufferTest, "%-d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%010d", i);
        s21_sprintf(bufferTest, "%010d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.5d", i);
        s21_sprintf(bufferTest, "%10.5d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.0d", i);
        s21_sprintf(bufferTest, "%10.0d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.10d", i);
        s21_sprintf(bufferTest, "%10.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10d", i);
        s21_sprintf(bufferTest, "% 10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -10d", i);
        s21_sprintf(bufferTest, "% -10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+10d", i);
        s21_sprintf(bufferTest, "%-+10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.10d", i);
        s21_sprintf(bufferTest, "%-.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.10d", i);
        s21_sprintf(bufferTest, "% -.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.10d", i);
        s21_sprintf(bufferTest, "%+-.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+100.100d", i);
        s21_sprintf(bufferTest, "%+100.100d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10.10d", i);
        s21_sprintf(bufferTest, "%+10.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10.10d", i);
        s21_sprintf(bufferTest, "%-10.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10.10d", i);
        s21_sprintf(bufferTest, "% 10.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.10d", i);
        s21_sprintf(bufferTest, "%1.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1d", i);
        s21_sprintf(bufferTest, "%1.1d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.10d", i);
        s21_sprintf(bufferTest, "%-+1.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.10d", i);
        s21_sprintf(bufferTest, "%- 1.10d", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

#test sprintf_ld
    char bufferTrue[500];
    char bufferTest[500];
long int i = 123456789012345L;
        sprintf(bufferTrue, "%ld", i);
        s21_sprintf(bufferTest, "%ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10ld", i);
        s21_sprintf(bufferTest, "%-10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+ld", i);
        s21_sprintf(bufferTest, "%+ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10ld", i);
        s21_sprintf(bufferTest, "%+10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% ld", i);
        s21_sprintf(bufferTest, "% ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-ld", i);
        s21_sprintf(bufferTest, "%-ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%010ld", i);
        s21_sprintf(bufferTest, "%010ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.5ld", i);
        s21_sprintf(bufferTest, "%10.5ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.0ld", i);
        s21_sprintf(bufferTest, "%10.0ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.10ld", i);
        s21_sprintf(bufferTest, "%10.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10ld", i);
        s21_sprintf(bufferTest, "% 10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -10ld", i);
        s21_sprintf(bufferTest, "% -10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+10ld", i);
        s21_sprintf(bufferTest, "%-+10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.10ld", i);
        s21_sprintf(bufferTest, "%-.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.10ld", i);
        s21_sprintf(bufferTest, "% -.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.10ld", i);
        s21_sprintf(bufferTest, "%+-.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+100.100ld", i);
        s21_sprintf(bufferTest, "%+100.100ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10.10ld", i);
        s21_sprintf(bufferTest, "%+10.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10.10ld", i);
        s21_sprintf(bufferTest, "%-10.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10.10ld", i);
        s21_sprintf(bufferTest, "% 10.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.10ld", i);
        s21_sprintf(bufferTest, "%1.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1ld", i);
        s21_sprintf(bufferTest, "%1.1ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.10ld", i);
        s21_sprintf(bufferTest, "%-+1.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.10ld", i);
        s21_sprintf(bufferTest, "%- 1.10ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

 #test sprintf_hd
    char bufferTrue[500];
    char bufferTest[500];

    for (int i = -10000 ; i <= 10000; i++){
        sprintf(bufferTrue, "%hd", i);
        s21_sprintf(bufferTest, "%hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10hd", i);
        s21_sprintf(bufferTest, "%-10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+hd", i);
        s21_sprintf(bufferTest, "%+hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10hd", i);
        s21_sprintf(bufferTest, "%+10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% hd", i);
        s21_sprintf(bufferTest, "% hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-hd", i);
        s21_sprintf(bufferTest, "%-hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%010hd", i);
        s21_sprintf(bufferTest, "%010hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.5hd", i);
        s21_sprintf(bufferTest, "%10.5hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.0hd", i);
        s21_sprintf(bufferTest, "%10.0hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%10.10hd", i);
        s21_sprintf(bufferTest, "%10.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10hd", i);
        s21_sprintf(bufferTest, "% 10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -10hd", i);
        s21_sprintf(bufferTest, "% -10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+10hd", i);
        s21_sprintf(bufferTest, "%-+10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.10hd", i);
        s21_sprintf(bufferTest, "%-.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.10hd", i);
        s21_sprintf(bufferTest, "% -.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.10hd", i);
        s21_sprintf(bufferTest, "%+-.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.50hd", i);
        s21_sprintf(bufferTest, "%+50.50hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+10.10hd", i);
        s21_sprintf(bufferTest, "%+10.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-10.10hd", i);
        s21_sprintf(bufferTest, "%-10.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 10.10hd", i);
        s21_sprintf(bufferTest, "% 10.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.10hd", i);
        s21_sprintf(bufferTest, "%1.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1hd", i);
        s21_sprintf(bufferTest, "%1.1hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.10hd", i);
        s21_sprintf(bufferTest, "%-+1.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.10hd", i);
        s21_sprintf(bufferTest, "%- 1.10hd", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

    #test sprintf_hhd
      char bufferTrue[500];
      char bufferTest[500];
      sprintf(bufferTrue, "%hhd", 129);
      s21_sprintf(bufferTest, "%hhd", 129);
      ck_assert_str_eq(bufferTrue, bufferTest);

    #test sprintf_e
    char bufferTrue[500];
    char bufferTest[500];
    double numbers[] = {5.8430984398438439493, 90.00, 8439.4343, 6, -5.8430984398438439493, -90.00, -8439.4343, -6, 0};

    for (int i = 0; i < 7; i++) {
        sprintf(bufferTrue, "%+e", numbers[i]);
        s21_sprintf(bufferTest, "%+e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% e", numbers[i]);
        s21_sprintf(bufferTest, "% e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-e", numbers[i]);
        s21_sprintf(bufferTest, "%-e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -e", numbers[i]);
        s21_sprintf(bufferTest, "% -e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-e", numbers[i]);
        s21_sprintf(bufferTest, "%+-e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50e", numbers[i]);
        s21_sprintf(bufferTest, "%50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50e", numbers[i]);
        s21_sprintf(bufferTest, "%+50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50e", numbers[i]);
        s21_sprintf(bufferTest, "% 50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50e", numbers[i]);
        s21_sprintf(bufferTest, "%-50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50e", numbers[i]);
        s21_sprintf(bufferTest, "% -50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50e", numbers[i]);
        s21_sprintf(bufferTest, "%-+50e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15e", numbers[i]);
        s21_sprintf(bufferTest, "%.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15e", numbers[i]);
        s21_sprintf(bufferTest, "% .15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15e", numbers[i]);
        s21_sprintf(bufferTest, "% -.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+-.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15e", numbers[i]);
        s21_sprintf(bufferTest, "%50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15e", numbers[i]);
        s21_sprintf(bufferTest, "%-50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15e", numbers[i]);
        s21_sprintf(bufferTest, "% 50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15e", numbers[i]);
        s21_sprintf(bufferTest, "%-+50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15e", numbers[i]);
        s21_sprintf(bufferTest, "% -50.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15e", numbers[i]);
        s21_sprintf(bufferTest, "%1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15e", numbers[i]);
        s21_sprintf(bufferTest, "%-1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15e", numbers[i]);
        s21_sprintf(bufferTest, "% 1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15e", numbers[i]);
        s21_sprintf(bufferTest, "%-+1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15e", numbers[i]);
        s21_sprintf(bufferTest, "%- 1.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+40.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15e", numbers[i]);
        s21_sprintf(bufferTest, "% 40.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15e", numbers[i]);
        s21_sprintf(bufferTest, "%-40.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15e", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15e", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.15e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0e", numbers[i]);
        s21_sprintf(bufferTest, "%0.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0e", numbers[i]);
        s21_sprintf(bufferTest, "%+0.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0e", numbers[i]);
        s21_sprintf(bufferTest, "% 0.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1e", numbers[i]);
        s21_sprintf(bufferTest, "%1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1e", numbers[i]);
        s21_sprintf(bufferTest, "%+1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1e", numbers[i]);
        s21_sprintf(bufferTest, "% 1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1e", numbers[i]);
        s21_sprintf(bufferTest, "%-1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1e", numbers[i]);
        s21_sprintf(bufferTest, "% -1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1e", numbers[i]);
        s21_sprintf(bufferTest, "%+-1.1e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0e", numbers[i]);
        s21_sprintf(bufferTest, "%40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0e", numbers[i]);
        s21_sprintf(bufferTest, "%+40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0e", numbers[i]);
        s21_sprintf(bufferTest, "% 40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0e", numbers[i]);
        s21_sprintf(bufferTest, "%-40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0e", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0e", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.0e", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

#test sprintf_E
    char bufferTrue[500];
    char bufferTest[500];
    double numbers[] = {-5921563224775977777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776., 90.00, 8439.4343, 6, -5.8430984398438439493, -90.00, -8439.4343, -6, 0};

    for (int i = 0; i < 7; i++) {
        sprintf(bufferTrue, "%+E", numbers[i]);
        s21_sprintf(bufferTest, "%+E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% E", numbers[i]);
        s21_sprintf(bufferTest, "% E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-E", numbers[i]);
        s21_sprintf(bufferTest, "%-E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -E", numbers[i]);
        s21_sprintf(bufferTest, "% -E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-E", numbers[i]);
        s21_sprintf(bufferTest, "%+-E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50E", numbers[i]);
        s21_sprintf(bufferTest, "%50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50E", numbers[i]);
        s21_sprintf(bufferTest, "%+50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50E", numbers[i]);
        s21_sprintf(bufferTest, "% 50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50E", numbers[i]);
        s21_sprintf(bufferTest, "%-50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50E", numbers[i]);
        s21_sprintf(bufferTest, "% -50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50E", numbers[i]);
        s21_sprintf(bufferTest, "%-+50E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15E", numbers[i]);
        s21_sprintf(bufferTest, "%.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15E", numbers[i]);
        s21_sprintf(bufferTest, "% -.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+-.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15E", numbers[i]);
        s21_sprintf(bufferTest, "%50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15E", numbers[i]);
        s21_sprintf(bufferTest, "% 50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-+50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15E", numbers[i]);
        s21_sprintf(bufferTest, "% -50.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15E", numbers[i]);
        s21_sprintf(bufferTest, "%1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15E", numbers[i]);
        s21_sprintf(bufferTest, "% 1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-+1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15E", numbers[i]);
        s21_sprintf(bufferTest, "%- 1.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+40.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15E", numbers[i]);
        s21_sprintf(bufferTest, "% 40.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15E", numbers[i]);
        s21_sprintf(bufferTest, "%-40.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15E", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15E", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.15E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0E", numbers[i]);
        s21_sprintf(bufferTest, "%0.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0E", numbers[i]);
        s21_sprintf(bufferTest, "%+0.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0E", numbers[i]);
        s21_sprintf(bufferTest, "% 0.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1E", numbers[i]);
        s21_sprintf(bufferTest, "%1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1E", numbers[i]);
        s21_sprintf(bufferTest, "%+1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1E", numbers[i]);
        s21_sprintf(bufferTest, "% 1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1E", numbers[i]);
        s21_sprintf(bufferTest, "%-1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1E", numbers[i]);
        s21_sprintf(bufferTest, "% -1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1E", numbers[i]);
        s21_sprintf(bufferTest, "%+-1.1E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0E", numbers[i]);
        s21_sprintf(bufferTest, "%40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0E", numbers[i]);
        s21_sprintf(bufferTest, "%+40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0E", numbers[i]);
        s21_sprintf(bufferTest, "% 40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0E", numbers[i]);
        s21_sprintf(bufferTest, "%-40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0E", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0E", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.0E", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

#test sprintf_LE_1
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 5.8430984398438439493L;
        sprintf(bufferTrue, "%+LE", i);
        s21_sprintf(bufferTest, "%+LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% LE", i);
        s21_sprintf(bufferTest, "% LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-LE", i);
        s21_sprintf(bufferTest, "%-LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -LE", i);
        s21_sprintf(bufferTest, "% -LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-LE", i);
        s21_sprintf(bufferTest, "%+-LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50LE", i);
        s21_sprintf(bufferTest, "%50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50LE", i);
        s21_sprintf(bufferTest, "%+50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50LE", i);
        s21_sprintf(bufferTest, "% 50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50LE", i);
        s21_sprintf(bufferTest, "%-50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50LE", i);
        s21_sprintf(bufferTest, "% -50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50LE", i);
        s21_sprintf(bufferTest, "%-+50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15LE", i);
        s21_sprintf(bufferTest, "%.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15LE", i);
        s21_sprintf(bufferTest, "%+.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15LE", i);
        s21_sprintf(bufferTest, "%-.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15LE", i);
        s21_sprintf(bufferTest, "% .15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15LE", i);
        s21_sprintf(bufferTest, "% -.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15LE", i);
        s21_sprintf(bufferTest, "%+-.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15LE", i);
        s21_sprintf(bufferTest, "%50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15LE", i);
        s21_sprintf(bufferTest, "%+50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15LE", i);
        s21_sprintf(bufferTest, "%-50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15LE", i);
        s21_sprintf(bufferTest, "% 50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15LE", i);
        s21_sprintf(bufferTest, "%-+50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15LE", i);
        s21_sprintf(bufferTest, "% -50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15LE", i);
        s21_sprintf(bufferTest, "%1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15LE", i);
        s21_sprintf(bufferTest, "%+1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15LE", i);
        s21_sprintf(bufferTest, "%-1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15LE", i);
        s21_sprintf(bufferTest, "% 1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15LE", i);
        s21_sprintf(bufferTest, "%-+1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15LE", i);
        s21_sprintf(bufferTest, "%- 1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15LE", i);
        s21_sprintf(bufferTest, "%+40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15LE", i);
        s21_sprintf(bufferTest, "% 40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15LE", i);
        s21_sprintf(bufferTest, "%-40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15LE", i);
        s21_sprintf(bufferTest, "%+-40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15LE", i);
        s21_sprintf(bufferTest, "%- 40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0LE", i);
        s21_sprintf(bufferTest, "%0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0LE", i);
        s21_sprintf(bufferTest, "%+0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0LE", i);
        s21_sprintf(bufferTest, "% 0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1LE", i);
        s21_sprintf(bufferTest, "%1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1LE", i);
        s21_sprintf(bufferTest, "%+1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1LE", i);
        s21_sprintf(bufferTest, "% 1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1LE", i);
        s21_sprintf(bufferTest, "%-1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1LE", i);
        s21_sprintf(bufferTest, "% -1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1LE", i);
        s21_sprintf(bufferTest, "%+-1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0LE", i);
        s21_sprintf(bufferTest, "%40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0LE", i);
        s21_sprintf(bufferTest, "%+40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0LE", i);
        s21_sprintf(bufferTest, "% 40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0LE", i);
        s21_sprintf(bufferTest, "%-40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0LE", i);
        s21_sprintf(bufferTest, "%+-40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0LE", i);
        s21_sprintf(bufferTest, "%- 40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_LE_2
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 0.2345672345672345678234567L;
        sprintf(bufferTrue, "%+LE", i);
        s21_sprintf(bufferTest, "%+LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% LE", i);
        s21_sprintf(bufferTest, "% LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-LE", i);
        s21_sprintf(bufferTest, "%-LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -LE", i);
        s21_sprintf(bufferTest, "% -LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-LE", i);
        s21_sprintf(bufferTest, "%+-LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50LE", i);
        s21_sprintf(bufferTest, "%50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50LE", i);
        s21_sprintf(bufferTest, "%+50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50LE", i);
        s21_sprintf(bufferTest, "% 50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50LE", i);
        s21_sprintf(bufferTest, "%-50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50LE", i);
        s21_sprintf(bufferTest, "% -50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50LE", i);
        s21_sprintf(bufferTest, "%-+50LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15LE", i);
        s21_sprintf(bufferTest, "%.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15LE", i);
        s21_sprintf(bufferTest, "%+.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15LE", i);
        s21_sprintf(bufferTest, "%-.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15LE", i);
        s21_sprintf(bufferTest, "% .15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15LE", i);
        s21_sprintf(bufferTest, "% -.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15LE", i);
        s21_sprintf(bufferTest, "%+-.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15LE", i);
        s21_sprintf(bufferTest, "%50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15LE", i);
        s21_sprintf(bufferTest, "%+50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15LE", i);
        s21_sprintf(bufferTest, "%-50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15LE", i);
        s21_sprintf(bufferTest, "% 50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15LE", i);
        s21_sprintf(bufferTest, "%-+50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15LE", i);
        s21_sprintf(bufferTest, "% -50.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15LE", i);
        s21_sprintf(bufferTest, "%1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15LE", i);
        s21_sprintf(bufferTest, "%+1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15LE", i);
        s21_sprintf(bufferTest, "%-1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15LE", i);
        s21_sprintf(bufferTest, "% 1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15LE", i);
        s21_sprintf(bufferTest, "%-+1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15LE", i);
        s21_sprintf(bufferTest, "%- 1.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15LE", i);
        s21_sprintf(bufferTest, "%+40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15LE", i);
        s21_sprintf(bufferTest, "% 40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15LE", i);
        s21_sprintf(bufferTest, "%-40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15LE", i);
        s21_sprintf(bufferTest, "%+-40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15LE", i);
        s21_sprintf(bufferTest, "%- 40.15LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0LE", i);
        s21_sprintf(bufferTest, "%0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0LE", i);
        s21_sprintf(bufferTest, "%+0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0LE", i);
        s21_sprintf(bufferTest, "% 0.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1LE", i);
        s21_sprintf(bufferTest, "%1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1LE", i);
        s21_sprintf(bufferTest, "%+1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1LE", i);
        s21_sprintf(bufferTest, "% 1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1LE", i);
        s21_sprintf(bufferTest, "%-1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1LE", i);
        s21_sprintf(bufferTest, "% -1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1LE", i);
        s21_sprintf(bufferTest, "%+-1.1LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0LE", i);
        s21_sprintf(bufferTest, "%40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0LE", i);
        s21_sprintf(bufferTest, "%+40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0LE", i);
        s21_sprintf(bufferTest, "% 40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0LE", i);
        s21_sprintf(bufferTest, "%-40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0LE", i);
        s21_sprintf(bufferTest, "%+-40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0LE", i);
        s21_sprintf(bufferTest, "%- 40.0LE", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_Le_1
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 5.8430984398438439493L;
        sprintf(bufferTrue, "%+Le", i);
        s21_sprintf(bufferTest, "%+Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Le", i);
        s21_sprintf(bufferTest, "% Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Le", i);
        s21_sprintf(bufferTest, "%-Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Le", i);
        s21_sprintf(bufferTest, "% -Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Le", i);
        s21_sprintf(bufferTest, "%+-Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Le", i);
        s21_sprintf(bufferTest, "%50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Le", i);
        s21_sprintf(bufferTest, "%+50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Le", i);
        s21_sprintf(bufferTest, "% 50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Le", i);
        s21_sprintf(bufferTest, "%-50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Le", i);
        s21_sprintf(bufferTest, "% -50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Le", i);
        s21_sprintf(bufferTest, "%-+50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Le", i);
        s21_sprintf(bufferTest, "%.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Le", i);
        s21_sprintf(bufferTest, "%+.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Le", i);
        s21_sprintf(bufferTest, "%-.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Le", i);
        s21_sprintf(bufferTest, "% .15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Le", i);
        s21_sprintf(bufferTest, "% -.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Le", i);
        s21_sprintf(bufferTest, "%+-.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Le", i);
        s21_sprintf(bufferTest, "%50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Le", i);
        s21_sprintf(bufferTest, "%+50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Le", i);
        s21_sprintf(bufferTest, "%-50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Le", i);
        s21_sprintf(bufferTest, "% 50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Le", i);
        s21_sprintf(bufferTest, "%-+50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Le", i);
        s21_sprintf(bufferTest, "% -50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Le", i);
        s21_sprintf(bufferTest, "%1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Le", i);
        s21_sprintf(bufferTest, "%+1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Le", i);
        s21_sprintf(bufferTest, "%-1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Le", i);
        s21_sprintf(bufferTest, "% 1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Le", i);
        s21_sprintf(bufferTest, "%-+1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Le", i);
        s21_sprintf(bufferTest, "%- 1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Le", i);
        s21_sprintf(bufferTest, "%+40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Le", i);
        s21_sprintf(bufferTest, "% 40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Le", i);
        s21_sprintf(bufferTest, "%-40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Le", i);
        s21_sprintf(bufferTest, "%+-40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Le", i);
        s21_sprintf(bufferTest, "%- 40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Le", i);
        s21_sprintf(bufferTest, "%0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Le", i);
        s21_sprintf(bufferTest, "%+0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Le", i);
        s21_sprintf(bufferTest, "% 0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Le", i);
        s21_sprintf(bufferTest, "%1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Le", i);
        s21_sprintf(bufferTest, "%+1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Le", i);
        s21_sprintf(bufferTest, "% 1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Le", i);
        s21_sprintf(bufferTest, "%-1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Le", i);
        s21_sprintf(bufferTest, "% -1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Le", i);
        s21_sprintf(bufferTest, "%+-1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Le", i);
        s21_sprintf(bufferTest, "%40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Le", i);
        s21_sprintf(bufferTest, "%+40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Le", i);
        s21_sprintf(bufferTest, "% 40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Le", i);
        s21_sprintf(bufferTest, "%-40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Le", i);
        s21_sprintf(bufferTest, "%+-40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Le", i);
        s21_sprintf(bufferTest, "%- 40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_Le_2
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 0.2345672345672345678234567L;
        sprintf(bufferTrue, "%+Le", i);
        s21_sprintf(bufferTest, "%+Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Le", i);
        s21_sprintf(bufferTest, "% Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Le", i);
        s21_sprintf(bufferTest, "%-Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Le", i);
        s21_sprintf(bufferTest, "% -Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Le", i);
        s21_sprintf(bufferTest, "%+-Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Le", i);
        s21_sprintf(bufferTest, "%50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Le", i);
        s21_sprintf(bufferTest, "%+50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Le", i);
        s21_sprintf(bufferTest, "% 50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Le", i);
        s21_sprintf(bufferTest, "%-50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Le", i);
        s21_sprintf(bufferTest, "% -50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Le", i);
        s21_sprintf(bufferTest, "%-+50Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Le", i);
        s21_sprintf(bufferTest, "%.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Le", i);
        s21_sprintf(bufferTest, "%+.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Le", i);
        s21_sprintf(bufferTest, "%-.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Le", i);
        s21_sprintf(bufferTest, "% .15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Le", i);
        s21_sprintf(bufferTest, "% -.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Le", i);
        s21_sprintf(bufferTest, "%+-.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Le", i);
        s21_sprintf(bufferTest, "%50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Le", i);
        s21_sprintf(bufferTest, "%+50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Le", i);
        s21_sprintf(bufferTest, "%-50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Le", i);
        s21_sprintf(bufferTest, "% 50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Le", i);
        s21_sprintf(bufferTest, "%-+50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Le", i);
        s21_sprintf(bufferTest, "% -50.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Le", i);
        s21_sprintf(bufferTest, "%1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Le", i);
        s21_sprintf(bufferTest, "%+1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Le", i);
        s21_sprintf(bufferTest, "%-1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Le", i);
        s21_sprintf(bufferTest, "% 1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Le", i);
        s21_sprintf(bufferTest, "%-+1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Le", i);
        s21_sprintf(bufferTest, "%- 1.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Le", i);
        s21_sprintf(bufferTest, "%+40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Le", i);
        s21_sprintf(bufferTest, "% 40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Le", i);
        s21_sprintf(bufferTest, "%-40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Le", i);
        s21_sprintf(bufferTest, "%+-40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Le", i);
        s21_sprintf(bufferTest, "%- 40.15Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Le", i);
        s21_sprintf(bufferTest, "%0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Le", i);
        s21_sprintf(bufferTest, "%+0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Le", i);
        s21_sprintf(bufferTest, "% 0.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Le", i);
        s21_sprintf(bufferTest, "%1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Le", i);
        s21_sprintf(bufferTest, "%+1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Le", i);
        s21_sprintf(bufferTest, "% 1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Le", i);
        s21_sprintf(bufferTest, "%-1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Le", i);
        s21_sprintf(bufferTest, "% -1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Le", i);
        s21_sprintf(bufferTest, "%+-1.1Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Le", i);
        s21_sprintf(bufferTest, "%40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Le", i);
        s21_sprintf(bufferTest, "%+40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Le", i);
        s21_sprintf(bufferTest, "% 40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Le", i);
        s21_sprintf(bufferTest, "%-40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Le", i);
        s21_sprintf(bufferTest, "%+-40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Le", i);
        s21_sprintf(bufferTest, "%- 40.0Le", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_x
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-x", i);
        s21_sprintf(bufferTest, "%-x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%x", i);
        s21_sprintf(bufferTest, "%x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-x", i);
        s21_sprintf(bufferTest, "%-x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.x", i);
        s21_sprintf(bufferTest, "%.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.x", i);
        s21_sprintf(bufferTest, "%-.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.x", i);
        s21_sprintf(bufferTest, "%50.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.x", i);
        s21_sprintf(bufferTest, "%-50.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.x", i);
        s21_sprintf(bufferTest, "%1.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.x", i);
        s21_sprintf(bufferTest, "%-1.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.x", i);
        s21_sprintf(bufferTest, "%-40.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.x", i);
        s21_sprintf(bufferTest, "%1.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.x", i);
        s21_sprintf(bufferTest, "%-1.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.x", i);
        s21_sprintf(bufferTest, "%-40.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%#1.x", i);
        s21_sprintf(bufferTest, "%#1.x", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }
    #test sprintf_X
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-X", i);
        s21_sprintf(bufferTest, "%-X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%X", i);
        s21_sprintf(bufferTest, "%X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-X", i);
        s21_sprintf(bufferTest, "%-X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.X", i);
        s21_sprintf(bufferTest, "%.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.X", i);
        s21_sprintf(bufferTest, "%-.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.X", i);
        s21_sprintf(bufferTest, "%50.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.X", i);
        s21_sprintf(bufferTest, "%-50.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.X", i);
        s21_sprintf(bufferTest, "%1.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.X", i);
        s21_sprintf(bufferTest, "%-1.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.X", i);
        s21_sprintf(bufferTest, "%-40.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.X", i);
        s21_sprintf(bufferTest, "%1.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.X", i);
        s21_sprintf(bufferTest, "%-1.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.X", i);
        s21_sprintf(bufferTest, "%-40.X", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_hx
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-hx", i);
        s21_sprintf(bufferTest, "%-hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%hx", i);
        s21_sprintf(bufferTest, "%hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-hx", i);
        s21_sprintf(bufferTest, "%-hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.hx", i);
        s21_sprintf(bufferTest, "%.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.hx", i);
        s21_sprintf(bufferTest, "%-.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.hx", i);
        s21_sprintf(bufferTest, "%50.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.hx", i);
        s21_sprintf(bufferTest, "%-50.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.hx", i);
        s21_sprintf(bufferTest, "%1.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.hx", i);
        s21_sprintf(bufferTest, "%-1.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.hx", i);
        s21_sprintf(bufferTest, "%-40.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.hx", i);
        s21_sprintf(bufferTest, "%1.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.hx", i);
        s21_sprintf(bufferTest, "%-1.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.hx", i);
        s21_sprintf(bufferTest, "%-40.hx", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_hX
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-hX", i);
        s21_sprintf(bufferTest, "%-hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%hX", i);
        s21_sprintf(bufferTest, "%hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-hX", i);
        s21_sprintf(bufferTest, "%-hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.hX", i);
        s21_sprintf(bufferTest, "%.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.hX", i);
        s21_sprintf(bufferTest, "%-.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.hX", i);
        s21_sprintf(bufferTest, "%50.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.hX", i);
        s21_sprintf(bufferTest, "%-50.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.hX", i);
        s21_sprintf(bufferTest, "%1.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.hX", i);
        s21_sprintf(bufferTest, "%-1.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.hX", i);
        s21_sprintf(bufferTest, "%-40.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.hX", i);
        s21_sprintf(bufferTest, "%1.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.hX", i);
        s21_sprintf(bufferTest, "%-1.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.hX", i);
        s21_sprintf(bufferTest, "%-40.hX", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_lx
    char bufferTrue[500];
    char bufferTest[500];


        sprintf(bufferTrue, "%-lx", 123456L);
        s21_sprintf(bufferTest, "%-lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%lx", 123456L);
        s21_sprintf(bufferTest, "%lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-lx", 123456L);
        s21_sprintf(bufferTest, "%-lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.lx", 123456L);
        s21_sprintf(bufferTest, "%.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.lx", 123456L);
        s21_sprintf(bufferTest, "%-.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.lx", 123456L);
        s21_sprintf(bufferTest, "%50.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.lx", 123456L);
        s21_sprintf(bufferTest, "%-50.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lx", 123456L);
        s21_sprintf(bufferTest, "%1.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lx", 123456L);
        s21_sprintf(bufferTest, "%-1.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lx", 123456L);
        s21_sprintf(bufferTest, "%-40.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lx", 123456L);
        s21_sprintf(bufferTest, "%1.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lx", 123456L);
        s21_sprintf(bufferTest, "%-1.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lx", 123456L);
        s21_sprintf(bufferTest, "%-40.lx", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

    #test sprintf_lX
    char bufferTrue[500];
    char bufferTest[500];


        sprintf(bufferTrue, "%-lX", 123456L);
        s21_sprintf(bufferTest, "%-lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%lX", 123456L);
        s21_sprintf(bufferTest, "%lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-lX", 123456L);
        s21_sprintf(bufferTest, "%-lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.lX", 123456L);
        s21_sprintf(bufferTest, "%.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.lX", 123456L);
        s21_sprintf(bufferTest, "%-.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.lX", 123456L);
        s21_sprintf(bufferTest, "%50.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.lX", 123456L);
        s21_sprintf(bufferTest, "%-50.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lX", 123456L);
        s21_sprintf(bufferTest, "%1.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lX", 123456L);
        s21_sprintf(bufferTest, "%-1.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lX", 123456L);
        s21_sprintf(bufferTest, "%-40.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lX", 123456L);
        s21_sprintf(bufferTest, "%1.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lX", 123456L);
        s21_sprintf(bufferTest, "%-1.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lX", 123456L);
        s21_sprintf(bufferTest, "%-40.lX", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

  #test sprintf_g
    char bufferTrue[500];
    char bufferTest[500];
    double numbers[] = {5.8430984398438439493, 90.00, 8439.4343, 6, -5.8430984398438439493, -90.00, -8439.4343, -6, 0};

    for (int i = 0; i < 7; i++) {
        sprintf(bufferTrue, "%+g", numbers[i]);
        s21_sprintf(bufferTest, "%+g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% g", numbers[i]);
        s21_sprintf(bufferTest, "% g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-g", numbers[i]);
        s21_sprintf(bufferTest, "%-g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -g", numbers[i]);
        s21_sprintf(bufferTest, "% -g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-g", numbers[i]);
        s21_sprintf(bufferTest, "%+-g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50g", numbers[i]);
        s21_sprintf(bufferTest, "%50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50g", numbers[i]);
        s21_sprintf(bufferTest, "%+50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50g", numbers[i]);
        s21_sprintf(bufferTest, "% 50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50g", numbers[i]);
        s21_sprintf(bufferTest, "%-50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50g", numbers[i]);
        s21_sprintf(bufferTest, "% -50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50g", numbers[i]);
        s21_sprintf(bufferTest, "%-+50g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15g", numbers[i]);
        s21_sprintf(bufferTest, "%.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15g", numbers[i]);
        s21_sprintf(bufferTest, "% .15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15g", numbers[i]);
        s21_sprintf(bufferTest, "% -.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+-.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15g", numbers[i]);
        s21_sprintf(bufferTest, "%50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15g", numbers[i]);
        s21_sprintf(bufferTest, "% 50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-+50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15g", numbers[i]);
        s21_sprintf(bufferTest, "% -50.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15g", numbers[i]);
        s21_sprintf(bufferTest, "%1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15g", numbers[i]);
        s21_sprintf(bufferTest, "% 1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-+1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15g", numbers[i]);
        s21_sprintf(bufferTest, "%- 1.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+40.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15g", numbers[i]);
        s21_sprintf(bufferTest, "% 40.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15g", numbers[i]);
        s21_sprintf(bufferTest, "%-40.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15g", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15g", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.15g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0g", numbers[i]);
        s21_sprintf(bufferTest, "%0.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0g", numbers[i]);
        s21_sprintf(bufferTest, "%+0.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0g", numbers[i]);
        s21_sprintf(bufferTest, "% 0.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1g", numbers[i]);
        s21_sprintf(bufferTest, "%1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1g", numbers[i]);
        s21_sprintf(bufferTest, "%+1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1g", numbers[i]);
        s21_sprintf(bufferTest, "% 1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1g", numbers[i]);
        s21_sprintf(bufferTest, "%-1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1g", numbers[i]);
        s21_sprintf(bufferTest, "% -1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1g", numbers[i]);
        s21_sprintf(bufferTest, "%+-1.1g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0g", numbers[i]);
        s21_sprintf(bufferTest, "%40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0g", numbers[i]);
        s21_sprintf(bufferTest, "%+40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0g", numbers[i]);
        s21_sprintf(bufferTest, "% 40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0g", numbers[i]);
        s21_sprintf(bufferTest, "%-40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0g", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0g", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.0g", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }
#test sprintf_G
    char bufferTrue[500];
    char bufferTest[500];
    double numbers[] = {5.8430984398438439493, 90.00, 8439.4343, 6, -5.8430984398438439493, -90.00, -8439.4343, -6, 0};

    for (int i = 0; i < 7; i++) {
        sprintf(bufferTrue, "%+G", numbers[i]);
        s21_sprintf(bufferTest, "%+G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% G", numbers[i]);
        s21_sprintf(bufferTest, "% G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-G", numbers[i]);
        s21_sprintf(bufferTest, "%-G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -G", numbers[i]);
        s21_sprintf(bufferTest, "% -G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-G", numbers[i]);
        s21_sprintf(bufferTest, "%+-G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%G", numbers[i]);
        s21_sprintf(bufferTest, "%G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+G", numbers[i]);
        s21_sprintf(bufferTest, "%+G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% G", numbers[i]);
        s21_sprintf(bufferTest, "% G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-G", numbers[i]);
        s21_sprintf(bufferTest, "%-G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -G", numbers[i]);
        s21_sprintf(bufferTest, "% -G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+G", numbers[i]);
        s21_sprintf(bufferTest, "%-+G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.G", numbers[i]);
        s21_sprintf(bufferTest, "%.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.G", numbers[i]);
        s21_sprintf(bufferTest, "%+.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.G", numbers[i]);
        s21_sprintf(bufferTest, "%-.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .G", numbers[i]);
        s21_sprintf(bufferTest, "% .G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.G", numbers[i]);
        s21_sprintf(bufferTest, "% -.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.G", numbers[i]);
        s21_sprintf(bufferTest, "%+-.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.G", numbers[i]);
        s21_sprintf(bufferTest, "%50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.G", numbers[i]);
        s21_sprintf(bufferTest, "%+50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.G", numbers[i]);
        s21_sprintf(bufferTest, "%-50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.G", numbers[i]);
        s21_sprintf(bufferTest, "% 50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.G", numbers[i]);
        s21_sprintf(bufferTest, "%-+50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.G", numbers[i]);
        s21_sprintf(bufferTest, "% -50.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.G", numbers[i]);
        s21_sprintf(bufferTest, "%1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.G", numbers[i]);
        s21_sprintf(bufferTest, "%+1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.G", numbers[i]);
        s21_sprintf(bufferTest, "%-1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.G", numbers[i]);
        s21_sprintf(bufferTest, "% 1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.G", numbers[i]);
        s21_sprintf(bufferTest, "%-+1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.G", numbers[i]);
        s21_sprintf(bufferTest, "%- 1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.G", numbers[i]);
        s21_sprintf(bufferTest, "%+40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.G", numbers[i]);
        s21_sprintf(bufferTest, "% 40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.G", numbers[i]);
        s21_sprintf(bufferTest, "%-40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.G", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.G", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.G", numbers[i]);
        s21_sprintf(bufferTest, "%0.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.G", numbers[i]);
        s21_sprintf(bufferTest, "%+0.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.G", numbers[i]);
        s21_sprintf(bufferTest, "% 0.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.G", numbers[i]);
        s21_sprintf(bufferTest, "%1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.G", numbers[i]);
        s21_sprintf(bufferTest, "%+1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.G", numbers[i]);
        s21_sprintf(bufferTest, "% 1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.G", numbers[i]);
        s21_sprintf(bufferTest, "%-1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.G", numbers[i]);
        s21_sprintf(bufferTest, "% -1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.G", numbers[i]);
        s21_sprintf(bufferTest, "%+-1.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.G", numbers[i]);
        s21_sprintf(bufferTest, "%40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.G", numbers[i]);
        s21_sprintf(bufferTest, "%+40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.G", numbers[i]);
        s21_sprintf(bufferTest, "% 40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.G", numbers[i]);
        s21_sprintf(bufferTest, "%-40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.G", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.G", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.G", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

#test sprintf_Lg_1
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 5.8430984398438439493L;
        sprintf(bufferTrue, "%+Lg", i);
        s21_sprintf(bufferTest, "%+Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Lg", i);
        s21_sprintf(bufferTest, "% Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Lg", i);
        s21_sprintf(bufferTest, "%-Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Lg", i);
        s21_sprintf(bufferTest, "% -Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Lg", i);
        s21_sprintf(bufferTest, "%+-Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Lg", i);
        s21_sprintf(bufferTest, "%50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Lg", i);
        s21_sprintf(bufferTest, "%+50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Lg", i);
        s21_sprintf(bufferTest, "% 50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Lg", i);
        s21_sprintf(bufferTest, "%-50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Lg", i);
        s21_sprintf(bufferTest, "% -50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Lg", i);
        s21_sprintf(bufferTest, "%-+50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Lg", i);
        s21_sprintf(bufferTest, "%.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Lg", i);
        s21_sprintf(bufferTest, "%+.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Lg", i);
        s21_sprintf(bufferTest, "%-.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Lg", i);
        s21_sprintf(bufferTest, "% .15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Lg", i);
        s21_sprintf(bufferTest, "% -.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Lg", i);
        s21_sprintf(bufferTest, "%+-.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Lg", i);
        s21_sprintf(bufferTest, "%50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Lg", i);
        s21_sprintf(bufferTest, "%+50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Lg", i);
        s21_sprintf(bufferTest, "%-50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Lg", i);
        s21_sprintf(bufferTest, "% 50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Lg", i);
        s21_sprintf(bufferTest, "%-+50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Lg", i);
        s21_sprintf(bufferTest, "% -50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Lg", i);
        s21_sprintf(bufferTest, "%1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Lg", i);
        s21_sprintf(bufferTest, "%+1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Lg", i);
        s21_sprintf(bufferTest, "%-1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Lg", i);
        s21_sprintf(bufferTest, "% 1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Lg", i);
        s21_sprintf(bufferTest, "%-+1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Lg", i);
        s21_sprintf(bufferTest, "%- 1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Lg", i);
        s21_sprintf(bufferTest, "%+40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Lg", i);
        s21_sprintf(bufferTest, "% 40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Lg", i);
        s21_sprintf(bufferTest, "%-40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Lg", i);
        s21_sprintf(bufferTest, "%+-40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Lg", i);
        s21_sprintf(bufferTest, "%- 40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Lg", i);
        s21_sprintf(bufferTest, "%0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Lg", i);
        s21_sprintf(bufferTest, "%+0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Lg", i);
        s21_sprintf(bufferTest, "% 0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Lg", i);
        s21_sprintf(bufferTest, "%1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Lg", i);
        s21_sprintf(bufferTest, "%+1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Lg", i);
        s21_sprintf(bufferTest, "% 1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Lg", i);
        s21_sprintf(bufferTest, "%-1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Lg", i);
        s21_sprintf(bufferTest, "% -1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Lg", i);
        s21_sprintf(bufferTest, "%+-1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Lg", i);
        s21_sprintf(bufferTest, "%40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Lg", i);
        s21_sprintf(bufferTest, "%+40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Lg", i);
        s21_sprintf(bufferTest, "% 40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Lg", i);
        s21_sprintf(bufferTest, "%-40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Lg", i);
        s21_sprintf(bufferTest, "%+-40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Lg", i);
        s21_sprintf(bufferTest, "%- 40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_Lg_2
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 0.2345672345672345678234567L;
        sprintf(bufferTrue, "%+Lg", i);
        s21_sprintf(bufferTest, "%+Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Lg", i);
        s21_sprintf(bufferTest, "% Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Lg", i);
        s21_sprintf(bufferTest, "%-Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Lg", i);
        s21_sprintf(bufferTest, "% -Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Lg", i);
        s21_sprintf(bufferTest, "%+-Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Lg", i);
        s21_sprintf(bufferTest, "%50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Lg", i);
        s21_sprintf(bufferTest, "%+50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Lg", i);
        s21_sprintf(bufferTest, "% 50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Lg", i);
        s21_sprintf(bufferTest, "%-50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Lg", i);
        s21_sprintf(bufferTest, "% -50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Lg", i);
        s21_sprintf(bufferTest, "%-+50Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Lg", i);
        s21_sprintf(bufferTest, "%.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Lg", i);
        s21_sprintf(bufferTest, "%+.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Lg", i);
        s21_sprintf(bufferTest, "%-.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Lg", i);
        s21_sprintf(bufferTest, "% .15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Lg", i);
        s21_sprintf(bufferTest, "% -.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Lg", i);
        s21_sprintf(bufferTest, "%+-.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Lg", i);
        s21_sprintf(bufferTest, "%50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Lg", i);
        s21_sprintf(bufferTest, "%+50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Lg", i);
        s21_sprintf(bufferTest, "%-50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Lg", i);
        s21_sprintf(bufferTest, "% 50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Lg", i);
        s21_sprintf(bufferTest, "%-+50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Lg", i);
        s21_sprintf(bufferTest, "% -50.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Lg", i);
        s21_sprintf(bufferTest, "%1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Lg", i);
        s21_sprintf(bufferTest, "%+1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Lg", i);
        s21_sprintf(bufferTest, "%-1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Lg", i);
        s21_sprintf(bufferTest, "% 1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Lg", i);
        s21_sprintf(bufferTest, "%-+1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Lg", i);
        s21_sprintf(bufferTest, "%- 1.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Lg", i);
        s21_sprintf(bufferTest, "%+40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Lg", i);
        s21_sprintf(bufferTest, "% 40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Lg", i);
        s21_sprintf(bufferTest, "%-40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Lg", i);
        s21_sprintf(bufferTest, "%+-40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Lg", i);
        s21_sprintf(bufferTest, "%- 40.15Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Lg", i);
        s21_sprintf(bufferTest, "%0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Lg", i);
        s21_sprintf(bufferTest, "%+0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Lg", i);
        s21_sprintf(bufferTest, "% 0.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Lg", i);
        s21_sprintf(bufferTest, "%1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Lg", i);
        s21_sprintf(bufferTest, "%+1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Lg", i);
        s21_sprintf(bufferTest, "% 1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Lg", i);
        s21_sprintf(bufferTest, "%-1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Lg", i);
        s21_sprintf(bufferTest, "% -1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Lg", i);
        s21_sprintf(bufferTest, "%+-1.1Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Lg", i);
        s21_sprintf(bufferTest, "%40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Lg", i);
        s21_sprintf(bufferTest, "%+40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Lg", i);
        s21_sprintf(bufferTest, "% 40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Lg", i);
        s21_sprintf(bufferTest, "%-40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Lg", i);
        s21_sprintf(bufferTest, "%+-40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Lg", i);
        s21_sprintf(bufferTest, "%- 40.0Lg", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_LG_1
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 5.8430984398438439493L;
        sprintf(bufferTrue, "%+LG", i);
        s21_sprintf(bufferTest, "%+LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% LG", i);
        s21_sprintf(bufferTest, "% LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-LG", i);
        s21_sprintf(bufferTest, "%-LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -LG", i);
        s21_sprintf(bufferTest, "% -LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-LG", i);
        s21_sprintf(bufferTest, "%+-LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50LG", i);
        s21_sprintf(bufferTest, "%50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50LG", i);
        s21_sprintf(bufferTest, "%+50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50LG", i);
        s21_sprintf(bufferTest, "% 50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50LG", i);
        s21_sprintf(bufferTest, "%-50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50LG", i);
        s21_sprintf(bufferTest, "% -50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50LG", i);
        s21_sprintf(bufferTest, "%-+50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15LG", i);
        s21_sprintf(bufferTest, "%.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15LG", i);
        s21_sprintf(bufferTest, "%+.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15LG", i);
        s21_sprintf(bufferTest, "%-.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15LG", i);
        s21_sprintf(bufferTest, "% .15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15LG", i);
        s21_sprintf(bufferTest, "% -.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15LG", i);
        s21_sprintf(bufferTest, "%+-.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15LG", i);
        s21_sprintf(bufferTest, "%50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15LG", i);
        s21_sprintf(bufferTest, "%+50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15LG", i);
        s21_sprintf(bufferTest, "%-50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15LG", i);
        s21_sprintf(bufferTest, "% 50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15LG", i);
        s21_sprintf(bufferTest, "%-+50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15LG", i);
        s21_sprintf(bufferTest, "% -50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15LG", i);
        s21_sprintf(bufferTest, "%1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15LG", i);
        s21_sprintf(bufferTest, "%+1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15LG", i);
        s21_sprintf(bufferTest, "%-1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15LG", i);
        s21_sprintf(bufferTest, "% 1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15LG", i);
        s21_sprintf(bufferTest, "%-+1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15LG", i);
        s21_sprintf(bufferTest, "%- 1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15LG", i);
        s21_sprintf(bufferTest, "%+40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15LG", i);
        s21_sprintf(bufferTest, "% 40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15LG", i);
        s21_sprintf(bufferTest, "%-40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15LG", i);
        s21_sprintf(bufferTest, "%+-40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15LG", i);
        s21_sprintf(bufferTest, "%- 40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0LG", i);
        s21_sprintf(bufferTest, "%0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0LG", i);
        s21_sprintf(bufferTest, "%+0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0LG", i);
        s21_sprintf(bufferTest, "% 0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1LG", i);
        s21_sprintf(bufferTest, "%1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1LG", i);
        s21_sprintf(bufferTest, "%+1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1LG", i);
        s21_sprintf(bufferTest, "% 1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1LG", i);
        s21_sprintf(bufferTest, "%-1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1LG", i);
        s21_sprintf(bufferTest, "% -1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1LG", i);
        s21_sprintf(bufferTest, "%+-1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0LG", i);
        s21_sprintf(bufferTest, "%40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0LG", i);
        s21_sprintf(bufferTest, "%+40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0LG", i);
        s21_sprintf(bufferTest, "% 40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0LG", i);
        s21_sprintf(bufferTest, "%-40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0LG", i);
        s21_sprintf(bufferTest, "%+-40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0LG", i);
        s21_sprintf(bufferTest, "%- 40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_LG_2
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 0.2345672345672345678234567L;
        sprintf(bufferTrue, "%+LG", i);
        s21_sprintf(bufferTest, "%+LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% LG", i);
        s21_sprintf(bufferTest, "% LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-LG", i);
        s21_sprintf(bufferTest, "%-LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -LG", i);
        s21_sprintf(bufferTest, "% -LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-LG", i);
        s21_sprintf(bufferTest, "%+-LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50LG", i);
        s21_sprintf(bufferTest, "%50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50LG", i);
        s21_sprintf(bufferTest, "%+50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50LG", i);
        s21_sprintf(bufferTest, "% 50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50LG", i);
        s21_sprintf(bufferTest, "%-50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50LG", i);
        s21_sprintf(bufferTest, "% -50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50LG", i);
        s21_sprintf(bufferTest, "%-+50LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15LG", i);
        s21_sprintf(bufferTest, "%.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15LG", i);
        s21_sprintf(bufferTest, "%+.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15LG", i);
        s21_sprintf(bufferTest, "%-.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15LG", i);
        s21_sprintf(bufferTest, "% .15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15LG", i);
        s21_sprintf(bufferTest, "% -.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15LG", i);
        s21_sprintf(bufferTest, "%+-.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15LG", i);
        s21_sprintf(bufferTest, "%50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15LG", i);
        s21_sprintf(bufferTest, "%+50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15LG", i);
        s21_sprintf(bufferTest, "%-50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15LG", i);
        s21_sprintf(bufferTest, "% 50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15LG", i);
        s21_sprintf(bufferTest, "%-+50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15LG", i);
        s21_sprintf(bufferTest, "% -50.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15LG", i);
        s21_sprintf(bufferTest, "%1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15LG", i);
        s21_sprintf(bufferTest, "%+1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15LG", i);
        s21_sprintf(bufferTest, "%-1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15LG", i);
        s21_sprintf(bufferTest, "% 1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15LG", i);
        s21_sprintf(bufferTest, "%-+1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15LG", i);
        s21_sprintf(bufferTest, "%- 1.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15LG", i);
        s21_sprintf(bufferTest, "%+40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15LG", i);
        s21_sprintf(bufferTest, "% 40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15LG", i);
        s21_sprintf(bufferTest, "%-40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15LG", i);
        s21_sprintf(bufferTest, "%+-40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15LG", i);
        s21_sprintf(bufferTest, "%- 40.15LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0LG", i);
        s21_sprintf(bufferTest, "%0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0LG", i);
        s21_sprintf(bufferTest, "%+0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0LG", i);
        s21_sprintf(bufferTest, "% 0.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1LG", i);
        s21_sprintf(bufferTest, "%1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1LG", i);
        s21_sprintf(bufferTest, "%+1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1LG", i);
        s21_sprintf(bufferTest, "% 1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1LG", i);
        s21_sprintf(bufferTest, "%-1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1LG", i);
        s21_sprintf(bufferTest, "% -1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1LG", i);
        s21_sprintf(bufferTest, "%+-1.1LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0LG", i);
        s21_sprintf(bufferTest, "%40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0LG", i);
        s21_sprintf(bufferTest, "%+40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0LG", i);
        s21_sprintf(bufferTest, "% 40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0LG", i);
        s21_sprintf(bufferTest, "%-40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0LG", i);
        s21_sprintf(bufferTest, "%+-40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0LG", i);
        s21_sprintf(bufferTest, "%- 40.0LG", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

    #test sprintf_o
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-o", i);
        s21_sprintf(bufferTest, "%-o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%o", i);
        s21_sprintf(bufferTest, "%o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-o", i);
        s21_sprintf(bufferTest, "%-o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.o", i);
        s21_sprintf(bufferTest, "%.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.o", i);
        s21_sprintf(bufferTest, "%-.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.o", i);
        s21_sprintf(bufferTest, "%50.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.o", i);
        s21_sprintf(bufferTest, "%-50.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.o", i);
        s21_sprintf(bufferTest, "%1.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.o", i);
        s21_sprintf(bufferTest, "%-1.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.o", i);
        s21_sprintf(bufferTest, "%-40.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.o", i);
        s21_sprintf(bufferTest, "%1.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.o", i);
        s21_sprintf(bufferTest, "%-1.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.o", i);
        s21_sprintf(bufferTest, "%-40.o", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_ho
    char bufferTrue[500];
    char bufferTest[500];


        sprintf(bufferTrue, "%-ho", 123456);
        s21_sprintf(bufferTest, "%-ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%ho", 123456);
        s21_sprintf(bufferTest, "%ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-ho", 123456);
        s21_sprintf(bufferTest, "%-ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.ho", 123456);
        s21_sprintf(bufferTest, "%.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.ho", 123456);
        s21_sprintf(bufferTest, "%-.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.ho", 123456);
        s21_sprintf(bufferTest, "%50.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.ho", 123456);
        s21_sprintf(bufferTest, "%-50.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.ho", 123456);
        s21_sprintf(bufferTest, "%1.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.ho", 123456);
        s21_sprintf(bufferTest, "%-1.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.ho", 123456);
        s21_sprintf(bufferTest, "%-40.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.ho", 123456);
        s21_sprintf(bufferTest, "%1.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.ho", 123456);
        s21_sprintf(bufferTest, "%-1.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.ho", 123456);
        s21_sprintf(bufferTest, "%-40.ho", 123456);
        ck_assert_str_eq(bufferTrue, bufferTest);

    #test sprintf_lo
    char bufferTrue[500];
    char bufferTest[500];


        sprintf(bufferTrue, "%-lo", 123456L);
        s21_sprintf(bufferTest, "%-lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%lo", 123456L);
        s21_sprintf(bufferTest, "%lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-lo", 123456L);
        s21_sprintf(bufferTest, "%-lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.lo", 123456L);
        s21_sprintf(bufferTest, "%.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.lo", 123456L);
        s21_sprintf(bufferTest, "%-.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.lo", 123456L);
        s21_sprintf(bufferTest, "%50.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.lo", 123456L);
        s21_sprintf(bufferTest, "%-50.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lo", 123456L);
        s21_sprintf(bufferTest, "%1.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lo", 123456L);
        s21_sprintf(bufferTest, "%-1.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lo", 123456L);
        s21_sprintf(bufferTest, "%-40.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.lo", 123456L);
        s21_sprintf(bufferTest, "%1.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.lo", 123456L);
        s21_sprintf(bufferTest, "%-1.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.lo", 123456L);
        s21_sprintf(bufferTest, "%-40.lo", 123456L);
        ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_u
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-u", i);
        s21_sprintf(bufferTest, "%-u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50u", i);
        s21_sprintf(bufferTest, "%50u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50u", i);
        s21_sprintf(bufferTest, "%-50u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.40u", i);
        s21_sprintf(bufferTest, "%.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.40u", i);
        s21_sprintf(bufferTest, "%-.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.40u", i);
        s21_sprintf(bufferTest, "%50.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.40u", i);
        s21_sprintf(bufferTest, "%-50.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.40u", i);
        s21_sprintf(bufferTest, "%1.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.40u", i);
        s21_sprintf(bufferTest, "%-1.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.40u", i);
        s21_sprintf(bufferTest, "%-40.40u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1u", i);
        s21_sprintf(bufferTest, "%1.1u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1u", i);
        s21_sprintf(bufferTest, "%-1.1u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0u", i);
        s21_sprintf(bufferTest, "%-40.0u", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_lu
    char bufferTrue[500];
    char bufferTest[500];

    long int i =151515515151L;
        sprintf(bufferTrue, "%50ld", i);
        s21_sprintf(bufferTest, "%50ld", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.40lu", i);
        s21_sprintf(bufferTest, "%.40lu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.40lu", i);
        s21_sprintf(bufferTest, "%50.40lu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.40lu", i);
        s21_sprintf(bufferTest, "%1.40lu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1lu", i);
        s21_sprintf(bufferTest, "%1.1lu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0lu", i);
        s21_sprintf(bufferTest, "%40.0lu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_hu
    char bufferTrue[500];
    char bufferTest[500];

    for ( int i = -5001; i < 5001; i++) {
        sprintf(bufferTrue, "%-hu", i);
        s21_sprintf(bufferTest, "%-hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50hu", i);
        s21_sprintf(bufferTest, "%50hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50hu", i);
        s21_sprintf(bufferTest, "%-50hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.40hu", i);
        s21_sprintf(bufferTest, "%.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.40hu", i);
        s21_sprintf(bufferTest, "%-.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.40hu", i);
        s21_sprintf(bufferTest, "%50.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.40hu", i);
        s21_sprintf(bufferTest, "%-50.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.40hu", i);
        s21_sprintf(bufferTest, "%1.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.40hu", i);
        s21_sprintf(bufferTest, "%-1.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.40hu", i);
        s21_sprintf(bufferTest, "%-40.40hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1hu", i);
        s21_sprintf(bufferTest, "%1.1hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1hu", i);
        s21_sprintf(bufferTest, "%-1.1hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0hu", i);
        s21_sprintf(bufferTest, "%-40.0hu", i);
        ck_assert_str_eq(bufferTrue, bufferTest);
    }

    #test sprintf_hhu
      char bufferTrue[500];
      char bufferTest[500];
      sprintf(bufferTrue, "%hhu", 200);
      s21_sprintf(bufferTest, "%hhu", 200);
      ck_assert_str_eq(bufferTrue, bufferTest);

    #test sprintf_f
    char bufferTrue[500];
    char bufferTest[500];
    double numbers[] = {5.8430984398438439493, 90.00, 8439.4343, 6, -5.8430984398438439493, -90.00, -8439.4343, -6, 0, 999.9999999, -999.9999999};

    for (int i = 0; i < 11; i++) {
        sprintf(bufferTrue, "%+f", numbers[i]);
        s21_sprintf(bufferTest, "%+f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% f", numbers[i]);
        s21_sprintf(bufferTest, "% f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-f", numbers[i]);
        s21_sprintf(bufferTest, "%-f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -f", numbers[i]);
        s21_sprintf(bufferTest, "% -f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-f", numbers[i]);
        s21_sprintf(bufferTest, "%+-f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50f", numbers[i]);
        s21_sprintf(bufferTest, "%50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50f", numbers[i]);
        s21_sprintf(bufferTest, "%+50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50f", numbers[i]);
        s21_sprintf(bufferTest, "% 50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50f", numbers[i]);
        s21_sprintf(bufferTest, "%-50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50f", numbers[i]);
        s21_sprintf(bufferTest, "% -50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50f", numbers[i]);
        s21_sprintf(bufferTest, "%-+50f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.14f", numbers[i]);
        s21_sprintf(bufferTest, "%.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .14f", numbers[i]);
        s21_sprintf(bufferTest, "% .14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.14f", numbers[i]);
        s21_sprintf(bufferTest, "% -.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+-.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.14f", numbers[i]);
        s21_sprintf(bufferTest, "%50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.14f", numbers[i]);
        s21_sprintf(bufferTest, "% 50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-+50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.14f", numbers[i]);
        s21_sprintf(bufferTest, "% -50.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.14f", numbers[i]);
        s21_sprintf(bufferTest, "%1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.14f", numbers[i]);
        s21_sprintf(bufferTest, "% 1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-+1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.14f", numbers[i]);
        s21_sprintf(bufferTest, "%- 1.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+40.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.14f", numbers[i]);
        s21_sprintf(bufferTest, "% 40.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.14f", numbers[i]);
        s21_sprintf(bufferTest, "%-40.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.14f", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.14f", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.14f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0f", numbers[i]);
        s21_sprintf(bufferTest, "%0.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0f", numbers[i]);
        s21_sprintf(bufferTest, "%+0.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0f", numbers[i]);
        s21_sprintf(bufferTest, "% 0.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1f", numbers[i]);
        s21_sprintf(bufferTest, "%1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1f", numbers[i]);
        s21_sprintf(bufferTest, "%+1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1f", numbers[i]);
        s21_sprintf(bufferTest, "% 1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1f", numbers[i]);
        s21_sprintf(bufferTest, "%-1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1f", numbers[i]);
        s21_sprintf(bufferTest, "% -1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1f", numbers[i]);
        s21_sprintf(bufferTest, "%+-1.1f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0f", numbers[i]);
        s21_sprintf(bufferTest, "%40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0f", numbers[i]);
        s21_sprintf(bufferTest, "%+40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0f", numbers[i]);
        s21_sprintf(bufferTest, "% 40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0f", numbers[i]);
        s21_sprintf(bufferTest, "%-40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0f", numbers[i]);
        s21_sprintf(bufferTest, "%+-40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0f", numbers[i]);
        s21_sprintf(bufferTest, "%- 40.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%#20.0f", numbers[i]);
        s21_sprintf(bufferTest, "%#20.0f", numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%*.*f", 5, 5, numbers[i]);
        s21_sprintf(bufferTest, "%*.*f", 5, 5, numbers[i]);
        ck_assert_str_eq(bufferTrue, bufferTest);

    }

    #test sprintf_Lf_1
    char bufferTrue[500];
    char bufferTest[500];


    long double i = 5.8430984398438439493L;
        sprintf(bufferTrue, "%+Lf", i);
        s21_sprintf(bufferTest, "%+Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Lf", i);
        s21_sprintf(bufferTest, "% Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Lf", i);
        s21_sprintf(bufferTest, "%-Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Lf", i);
        s21_sprintf(bufferTest, "% -Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Lf", i);
        s21_sprintf(bufferTest, "%+-Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Lf", i);
        s21_sprintf(bufferTest, "%50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Lf", i);
        s21_sprintf(bufferTest, "%+50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Lf", i);
        s21_sprintf(bufferTest, "% 50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Lf", i);
        s21_sprintf(bufferTest, "%-50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Lf", i);
        s21_sprintf(bufferTest, "% -50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Lf", i);
        s21_sprintf(bufferTest, "%-+50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Lf", i);
        s21_sprintf(bufferTest, "%.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Lf", i);
        s21_sprintf(bufferTest, "%+.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Lf", i);
        s21_sprintf(bufferTest, "%-.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Lf", i);
        s21_sprintf(bufferTest, "% .15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Lf", i);
        s21_sprintf(bufferTest, "% -.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Lf", i);
        s21_sprintf(bufferTest, "%+-.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Lf", i);
        s21_sprintf(bufferTest, "%50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Lf", i);
        s21_sprintf(bufferTest, "%+50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Lf", i);
        s21_sprintf(bufferTest, "%-50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Lf", i);
        s21_sprintf(bufferTest, "% 50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Lf", i);
        s21_sprintf(bufferTest, "%-+50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Lf", i);
        s21_sprintf(bufferTest, "% -50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Lf", i);
        s21_sprintf(bufferTest, "%1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Lf", i);
        s21_sprintf(bufferTest, "%+1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Lf", i);
        s21_sprintf(bufferTest, "%-1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Lf", i);
        s21_sprintf(bufferTest, "% 1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Lf", i);
        s21_sprintf(bufferTest, "%-+1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Lf", i);
        s21_sprintf(bufferTest, "%- 1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Lf", i);
        s21_sprintf(bufferTest, "%+40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Lf", i);
        s21_sprintf(bufferTest, "% 40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Lf", i);
        s21_sprintf(bufferTest, "%-40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Lf", i);
        s21_sprintf(bufferTest, "%+-40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Lf", i);
        s21_sprintf(bufferTest, "%- 40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Lf", i);
        s21_sprintf(bufferTest, "%0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Lf", i);
        s21_sprintf(bufferTest, "%+0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Lf", i);
        s21_sprintf(bufferTest, "% 0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Lf", i);
        s21_sprintf(bufferTest, "%1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Lf", i);
        s21_sprintf(bufferTest, "%+1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Lf", i);
        s21_sprintf(bufferTest, "% 1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Lf", i);
        s21_sprintf(bufferTest, "%-1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Lf", i);
        s21_sprintf(bufferTest, "% -1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Lf", i);
        s21_sprintf(bufferTest, "%+-1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Lf", i);
        s21_sprintf(bufferTest, "%40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Lf", i);
        s21_sprintf(bufferTest, "%+40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Lf", i);
        s21_sprintf(bufferTest, "% 40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Lf", i);
        s21_sprintf(bufferTest, "%-40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Lf", i);
        s21_sprintf(bufferTest, "%+-40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Lf", i);
        s21_sprintf(bufferTest, "%- 40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);


#test sprintf_Lf_2
    char bufferTrue[500];
    char bufferTest[500];

    long double i = 0.2345672345672345678234567L;
        sprintf(bufferTrue, "%+Lf", i);
        s21_sprintf(bufferTest, "%+Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% Lf", i);
        s21_sprintf(bufferTest, "% Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-Lf", i);
        s21_sprintf(bufferTest, "%-Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -Lf", i);
        s21_sprintf(bufferTest, "% -Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-Lf", i);
        s21_sprintf(bufferTest, "%+-Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50Lf", i);
        s21_sprintf(bufferTest, "%50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50Lf", i);
        s21_sprintf(bufferTest, "%+50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50Lf", i);
        s21_sprintf(bufferTest, "% 50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50Lf", i);
        s21_sprintf(bufferTest, "%-50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50Lf", i);
        s21_sprintf(bufferTest, "% -50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50Lf", i);
        s21_sprintf(bufferTest, "%-+50Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%.15Lf", i);
        s21_sprintf(bufferTest, "%.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+.15Lf", i);
        s21_sprintf(bufferTest, "%+.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-.15Lf", i);
        s21_sprintf(bufferTest, "%-.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% .15Lf", i);
        s21_sprintf(bufferTest, "% .15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -.15Lf", i);
        s21_sprintf(bufferTest, "% -.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-.15Lf", i);
        s21_sprintf(bufferTest, "%+-.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%50.15Lf", i);
        s21_sprintf(bufferTest, "%50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+50.15Lf", i);
        s21_sprintf(bufferTest, "%+50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-50.15Lf", i);
        s21_sprintf(bufferTest, "%-50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 50.15Lf", i);
        s21_sprintf(bufferTest, "% 50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+50.15Lf", i);
        s21_sprintf(bufferTest, "%-+50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -50.15Lf", i);
        s21_sprintf(bufferTest, "% -50.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.15Lf", i);
        s21_sprintf(bufferTest, "%1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.15Lf", i);
        s21_sprintf(bufferTest, "%+1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.15Lf", i);
        s21_sprintf(bufferTest, "%-1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.15Lf", i);
        s21_sprintf(bufferTest, "% 1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-+1.15Lf", i);
        s21_sprintf(bufferTest, "%-+1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 1.15Lf", i);
        s21_sprintf(bufferTest, "%- 1.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.15Lf", i);
        s21_sprintf(bufferTest, "%+40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.15Lf", i);
        s21_sprintf(bufferTest, "% 40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.15Lf", i);
        s21_sprintf(bufferTest, "%-40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.15Lf", i);
        s21_sprintf(bufferTest, "%+-40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.15Lf", i);
        s21_sprintf(bufferTest, "%- 40.15Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%0.0Lf", i);
        s21_sprintf(bufferTest, "%0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+0.0Lf", i);
        s21_sprintf(bufferTest, "%+0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 0.0Lf", i);
        s21_sprintf(bufferTest, "% 0.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%1.1Lf", i);
        s21_sprintf(bufferTest, "%1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+1.1Lf", i);
        s21_sprintf(bufferTest, "%+1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 1.1Lf", i);
        s21_sprintf(bufferTest, "% 1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-1.1Lf", i);
        s21_sprintf(bufferTest, "%-1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% -1.1Lf", i);
        s21_sprintf(bufferTest, "% -1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-1.1Lf", i);
        s21_sprintf(bufferTest, "%+-1.1Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%40.0Lf", i);
        s21_sprintf(bufferTest, "%40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+40.0Lf", i);
        s21_sprintf(bufferTest, "%+40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "% 40.0Lf", i);
        s21_sprintf(bufferTest, "% 40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%-40.0Lf", i);
        s21_sprintf(bufferTest, "%-40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%+-40.0Lf", i);
        s21_sprintf(bufferTest, "%+-40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

        sprintf(bufferTrue, "%- 40.0Lf", i);
        s21_sprintf(bufferTest, "%- 40.0Lf", i);
        ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_percent
    char bufferTrue[500];
    char bufferTest[500];

    sprintf(bufferTrue, "%% Test %d", 1);
    s21_sprintf(bufferTest, "%% Test %d", 1);
    ck_assert_str_eq(bufferTrue, bufferTest);

#test sprintf_p
    char bufferTrue[500];
    char bufferTest[500];

    char * val1 = "0p32";
    long int* val2 = (void*)3088675747373646;
    long long int* val3 = (void*)33030030303;
    unsigned short int* val4 = (void*)22600;

    sprintf(bufferTrue, "%p", val1);
    s21_sprintf(bufferTest, "%p", val1);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%5p", val1);
    s21_sprintf(bufferTest, "%5p", val1);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%p", val2);
    s21_sprintf(bufferTest, "%p", val2);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%5p", val2);
    s21_sprintf(bufferTest, "%5p", val2);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%p", val3);
    s21_sprintf(bufferTest, "%p", val3);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%5p", val3);
    s21_sprintf(bufferTest, "%5p", val3);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%p", val4);
    s21_sprintf(bufferTest, "%p", val4);
    ck_assert_str_eq(bufferTrue, bufferTest);

    sprintf(bufferTrue, "%5p", val4);
    s21_sprintf(bufferTest, "%5p", val4);
    ck_assert_str_eq(bufferTrue, bufferTest);




////////////////////////////////////////////////
#test sscanf_c_1


  char format[] = "%c";
  char str[] = "\t\n\n  1 \n  \t";
  char c1, c2;

  int16_t res1 = s21_sscanf(str, format, &c1);
  int16_t res2 = sscanf(str, format, &c2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c1, c2);

#test sscanf_c_2
  char format[] = "%c";
  char str[] = "\t\n\n   \n  \ta";
  char c1, c2;
  int16_t res1 = s21_sscanf(str, format, &c1);
  int16_t res2 = sscanf(str, format, &c2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c1, c2);

#test sscanf_c_3
  char format[] = "%c%c%c";
  char str[] = "\t\n\n  123 \n  \t";
  char c11, c12, c13, c21, c22, c23;

  int16_t res1 = s21_sscanf(str, format, &c11, &c12, &c13);
  int16_t res2 = sscanf(str, format, &c21, &c22, &c23);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c11, c21);
  ck_assert_int_eq(c12, c22);
  ck_assert_int_eq(c13, c23);

#test sscanf_c_4
  char format[] = "%c %c \t%c";
  char str[] = "\t\n\n  1    2 3 \n  \t";
  char c11, c12, c13, c21, c22, c23;

  int16_t res1 = s21_sscanf(str, format, &c11, &c12, &c13);
  int16_t res2 = sscanf(str, format, &c21, &c22, &c23);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c11, c21);
  ck_assert_int_eq(c12, c22);
  ck_assert_int_eq(c13, c23);

#test sscanf_c_5
  char format[] = "%c %c \t%c";
  char str[] = "\t\n\n  123 \n  \t";
  char c11, c12, c13, c21, c22, c23;

  int16_t res1 = s21_sscanf(str, format, &c11, &c12, &c13);
  int16_t res2 = sscanf(str, format, &c21, &c22, &c23);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c11, c21);
  ck_assert_int_eq(c12, c22);
  ck_assert_int_eq(c13, c23);

#test sscanf_c_6
  char format[] = "%c %*c \t%c";
  char str[] = "\t\n\n  123 \n  \t";
  char c11, c12, c21, c22;

  int16_t res1 = s21_sscanf(str, format, &c11, &c12);
  int16_t res2 = sscanf(str, format, &c21, &c22);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(c11, c21);
  ck_assert_int_eq(c12, c22);

#test sscanf_x

  char format[] = "%hhx%hhx%hhx";
  char str[] = "123 +198 -87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_2
  char format[] = "%hhx%hhx%hhx";
  char str[] = "12a3 +156B4 -17C23";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_3
  char format[] = "%hhx%hhx";
  char str[] = "0 +0x";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);

#test sscanf_x_4
  char format[] = "%hhx%hhx%hhx";
  char str[] = "0 -0XABC -0X";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_5
  char format[] = "%hhx%hhx%hhx";
  char str[] = "0abc4 -0XABC 0x";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_6
  char format[] = "%1hhx %1hhx %1hhx";
  char str[] = "1a +04 -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_7
  char format[] = "%1hhx %1hhx %1hhx";
  char str[] = "1a 0x -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_8
  char format[] = "%2hhx %2hhx %2hhx";
  char str[] = "1a bc 0x -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_9

  char format[] = "%2hhx %2hhx %2hhx";
  char str[] = "1a bCc 0x -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_10

  char format[] = "%3hhx %3hhx %3hhx";
  char str[] = "0x123 +0X4 -37x23";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_11

  char format[] = "%*hhx %*hhx %*hhx";
  char str[] = "0x123 +04 -372f3";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_12
  char format[] = "%hx%hx%hx";
  char str[] = "123 +198 -87";
  unsigned short d1, d2;
  unsigned short q1, q2;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_13
  char format[] = "%hx%hx%hx";
  char str[] = "12a3 +156B4 -17C23";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_14

  char format[] = "%hx%hx";
  char str[] = "0 +0x";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);


#test sscanf_x_15
  char format[] = "%hx%hx%hx";
  char str[] = "0 -0XABC -0X";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_16
  char format[] = "%hx%hx%hx";
  char str[] = "0abc4 -0XABC 0x";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_17
  char format[] = "%1hx %1hx %1hx";
  char str[] = "1a +04 -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
#test sscanf_x_18
  char format[] = "%1hx %1hx %1hx";
  char str[] = "1a 0x -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_19
  char format[] = "%2hx %2hx %2hx";
  char str[] = "1a bc 0x -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_20
  char format[] = "%2hx %2hx %2hx";
  char str[] = "1a bCc 0x -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_21
  char format[] = "%3hx %3hx %3hx";
  char str[] = "0x123 +0X4 -37x23";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_22
  char format[] = "%*hx %*hx %*hx";
  char str[] = "0x123 +04 -372f3";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_23
  char format[] = "%x%x%x";
  char str[] = "123 +198 -87";
  unsigned int d1, d2;
  unsigned int q1, q2;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_24
  char format[] = "%x%x%x";
  char str[] = "12a3 +156B4 -17C23";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_25
  char format[] = "%x%x";
  char str[] = "0 +0x";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);

#test sscanf_x_26
  char format[] = "%x%x%x";
  char str[] = "0 -0XABC -0X";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_27
  char format[] = "%x%x%x";
  char str[] = "0abc4 -0XABC 0x";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_28
  char format[] = "%1x %1x %1x";
  char str[] = "1a +04 -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_29
  char format[] = "%1x %1x %1x";
  char str[] = "1a 0x -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_30
  char format[] = "%2x %2x %2x";
  char str[] = "1a bc 0x -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_31
  char format[] = "%2x %2x %2x";
  char str[] = "1a bCc 0x -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_32
  char format[] = "%3x %3x %3x";
  char str[] = "0x123 +0X4 -37x23";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
#test sscanf_x_33
  char format[] = "%*x %*x %*x";
  char str[] = "0x123 +04 -372f3";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_34
  char format[] = "%lx%lx%lx";
  char str[] = "123 +198 -87";
  unsigned long int d1, d2;
  unsigned long int q1, q2;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_35
  char format[] = "%lx%lx%lx";
  char str[] = "12a3 +156B4 -17C23";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_36
  char format[] = "%lx%lx";
  char str[] = "0 +0x";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);

#test sscanf_x_37
  char format[] = "%lx%lx%lx";
  char str[] = "0 -0XABC -0X";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_38
  char format[] = "%lx%lx%lx";
  char str[] = "0abc4 -0XABC 0x";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_39
  char format[] = "%1lx %1lx %1lx";
  char str[] = "1a +04 -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_40
  char format[] = "%1lx %1lx %1lx";
  char str[] = "1a 0x -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_41
  char format[] = "%2lx %2lx %2lx";
  char str[] = "1a bc 0x -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_42
  char format[] = "%2lx %2lx %2lx";
  char str[] = "1a bCc 0x -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_43
  char format[] = "%3lx %3lx %3lx";
  char str[] = "0x123 +0X4 -37x23";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_44
  char format[] = "%*lx %*lx %*lx";
  char str[] = "0x123 +04 -372f3";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_45
  char format[] = "%llx%llx%llx";
  char str[] = "123 +198 -87";
  unsigned long long int d1, d2;
  unsigned long long int q1, q2;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_x_46
  char format[] = "%llx%llx%llx";
  char str[] = "12a3 +156B4 -17C23";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_47
  char format[] = "%llx%llx";
  char str[] = "0 +0x";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);

#test sscanf_x_48
  char format[] = "%llx%llx%llx";
  char str[] = "0 -0XABC -0X";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_49
  char format[] = "%llx%llx%llx";
  char str[] = "0abc4 -0XABC 0x";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_50
  char format[] = "%1llx %1llx %1llx";
  char str[] = "1a +04 -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
#test sscanf_x_51
  char format[] = "%1llx %1llx %1llx";
  char str[] = "1a 0x -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_52
  char format[] = "%2llx %2llx %2llx";
  char str[] = "1a bc 0x -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_53
  char format[] = "%2llx %2llx %2llx";
  char str[] = "1a bCc 0x -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_54
  char format[] = "%3llx %3llx %3llx";
  char str[] = "0x123 +0X4 -37x23";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_x_55
  char format[] = "%*llx %*llx %*llx";
  char str[] = "0x123 +04 -372f3";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);




#test sscanf_real
  char format[] = "%f %f %f";
  char str[] = "123 +198 -87";
  float d1, d2;
  float q1, q2;
  float z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);

#test sscanf_real_1
  char format[] = "%fg %f w%fx";
  char str[] = "75g +19.8w -87.x";
  float d1, d2;
  float q1, q2;
  float z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);

#test sscanf_real_3
  char format[] = "%f";
  char str[] = "Nap";
  float d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1);
  int16_t res2 = sscanf(str, format, &d2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);

#test sscanf_real_4
  char format[] = "%f";
  char str[] = "Np";
  float d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1);
  int16_t res2 = sscanf(str, format, &d2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);

#test sscanf_real_5
  char format[] = "%f";
  char str[] = "iNd";
  float d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1);
  int16_t res2 = sscanf(str, format, &d2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);

#test sscanf_real_6
  char format[] = "%f";
  char str[] = "id";
  float d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1);
  int16_t res2 = sscanf(str, format, &d2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);

#test sscanf_real_7
  char format[] = "%f %f %f %f";
  char str[] = "34.56e3 83.2e-4 .43e+1 +2.43e3";
  float d1, d2;
  float q1, q2;
  float z1, z2;
  float w1, w2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_8
  char format[] = "%1f %1f %2f %1f";
  char str[] = "34.5+6e3 83.2e-4 .43e+1 +2.43e3";
  float d1, d2;
  float q1, q2;
  float z1, z2;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_9
  char format[] = "%*f %7f %*f %*f";
  char str[] = "34.5+6e3 83.2e-4 +43e+1 +2.43e3";
  float d1, d2;
  float q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);

#test sscanf_real_10
  char format[] = "%fr %7f p";
  char str[] = "34.5r 83.2ep4";
  float d1, d2;
  float q1 = 0, q2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1);
  int16_t res2 = sscanf(str, format, &d2, &q2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);

#test sscanf_real_11
  char format[] = "%1f %1f %1f %1f";
  char str[] = "34 32. +45.e +23E3 -0.3e4";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_12
  char format[] = "%2f %2f %2f %2f";
  char str[] = "34 3. +45.e +23E3";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_13
  char format[] = "%3f %3f %4f %3f";
  char str[] = "34 3. +45.e +23E3";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_14
  char format[] = "%4f %4f %4f %4f";
  char str[] = "34 3. +45.e +23E3";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_15
  char format[] = "%f %fx %2f1 %2fx %*f %*f";
  char str[] = "1.1 2.x 1.1 2.x 1.1 2.x";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);

#test sscanf_real_16
  char format[] = "%f %4f %5fq %6f %*f q%*f";
  char str[] = "1.3e1 1.4eq2 1.3e1q 1.4 1.3eq 1.4e2";
  float d1, d2;
  float q1 = 0, q2 = 0;
  float z1 = 0, z2 = 0;
  float w1 = 0, w2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(d1, d2);
  ck_assert_float_eq(q1, q2);
  ck_assert_float_eq(z1, z2);
  ck_assert_float_eq(w1, w2);


#test sscanf_p_1
  char format[] = "%p";
  char str[] = "0xAAAA";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_2
  char format[] = "%5p";
  char str[] = "0xAAAA";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_3
  char format[] = "%p";
  char str[] = "0xFFFFFF";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_4
  char format[] = "%p";
  char str[] = "0x0000";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_5
  char format[] = "%p";
  char str[] = "0xA2361598";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_6
  char format[] = "%p";
  char str[] = "0x34567hjk";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_7
  char format[] = "%p";
  char str[] = "0x34567hjk678";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_8
  char format[] = "%p";
  char str[] = "0x34ABcd68";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_9
  char format[] = "%p";
  char str[] = "1234567890ABCDEF";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_10
  char format[] = "%5p";
  char str[] = "0x237481";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_11
  char format[] = "%6p";
  char str[] = "0xdksajh";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_12
  char format[] = "%6p";
  char str[] = "0xAGAGUIY";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_13
  char format[] = "%p";
  char str[] = "0xAGAGUIYUYGFSV";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_14
  char format[] = "%p";
  char str[] = "0xAA64BB";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);

#test sscanf_p_15
  char format[] = "%p";
  char str[] = "0xGGH7TY";
  int *p1 = 0, *p2 = 0;

  int16_t res1 = s21_sscanf(str, format, &p1);
  int16_t res2 = sscanf(str, format, &p2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(p1, p2);


#test sscanf_o_1
  char format[] = "%hho%hho%hho";
  char str[] = "123 +198 -87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_2
  char format[] = "%hho%hho%hho";
  char str[] = "123 +1564 -1723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_3
  char format[] = "%1hho %1hho %1hho";
  char str[] = "1 +04 -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_4
  char format[] = "%2hho %2hho %2hho";
  char str[] = "0123 +04 -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_5
  char format[] = "%3hho %3hho %3hho";
  char str[] = "0123 +04 -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_6
  char format[] = "%*hho %*hho %*hho";
  char str[] = "0123 +04 -3723";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_7
  char format[] = "%ho%ho%ho";
  char str[] = "123 +198 -87";
  unsigned short d1, d2;
  unsigned short q1, q2;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_8
  char format[] = "%ho%ho%ho";
  char str[] = "123 +1564 -1723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_9
  char format[] = "%1ho %1ho %1ho";
  char str[] = "1 +04 -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_10
  char format[] = "%2ho %2ho %2ho";
  char str[] = "0123 +04 -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_11
  char format[] = "%3ho %3ho %3ho";
  char str[] = "0123 +04 -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_12
  char format[] = "%*ho %*ho %*ho";
  char str[] = "0123 +04 -3723";
  unsigned short d1 = 0, d2 = 0;
  unsigned short q1 = 0, q2 = 0;
  unsigned short z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_13
  char format[] = "%o%o%o";
  char str[] = "123 +198 -87";
  unsigned int d1, d2;
  unsigned int q1, q2;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_14
  char format[] = "%o%o%o";
  char str[] = "123 +1564 -1723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_15
  char format[] = "%1o %1o %1o";
  char str[] = "1 +04 -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_16
  char format[] = "%2o %2o %2o";
  char str[] = "0123 +04 -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_17
  char format[] = "%3o %3o %3o";
  char str[] = "0123 +04 -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_18
  char format[] = "%*o %*o %*o";
  char str[] = "0123 +04 -3723";
  unsigned int d1 = 0, d2 = 0;
  unsigned int q1 = 0, q2 = 0;
  unsigned int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_19
  char format[] = "%lo%lo%lo";
  char str[] = "123 +198 -87";
  unsigned long int d1, d2;
  unsigned long int q1, q2;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_20
  char format[] = "%lo%lo%lo";
  char str[] = "123 +1564 -1723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_21
  char format[] = "%1lo %1lo %1lo";
  char str[] = "1 +04 -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_22
  char format[] = "%2lo %2lo %2lo";
  char str[] = "0123 +04 -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_23
  char format[] = "%3lo %3lo %3lo";
  char str[] = "0123 +04 -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_24
  char format[] = "%*lo %*lo %*lo";
  char str[] = "0123 +04 -3723";
  unsigned long int d1 = 0, d2 = 0;
  unsigned long int q1 = 0, q2 = 0;
  unsigned long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);





#test sscanf_o_26
  char format[] = "%llo%llo%llo";
  char str[] = "123 +1564 -1723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_27
  char format[] = "%1llo %1llo %1llo";
  char str[] = "1 +04 -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_28
  char format[] = "%2llo %2llo %2llo";
  char str[] = "0123 +04 -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_29
  char format[] = "%3llo %3llo %3llo";
  char str[] = "0123 +04 -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_o_30
  char format[] = "%*llo %*llo %*llo";
  char str[] = "0123 +04 -3723";
  unsigned long long int d1 = 0, d2 = 0;
  unsigned long long int q1 = 0, q2 = 0;
  unsigned long long int z1 = 0, z2 = 0;
  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_n_1
  char format[] = "%n";
  char str[] = "Ilyusha";
  int n1 = 0, n2 = 0;

  int16_t res1 = s21_sscanf(str, format, &n1);
  int16_t res2 = sscanf(str, format, &n2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);

#test sscanf_n_2
  char format[] = "%d %n";
  char str[] = "80 Ilyusha";
  int d1 = 0, d2 = 0;
  int n1 = 0, n2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &n1);
  int16_t res2 = sscanf(str, format, &d2, &n2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(d1, d2);
  ck_assert_int_eq(n1, n2);

#test sscanf_n_3
  char format[] = "%d %d %n %d %d %d";
  char str[] = "80 50 70 371 327";
  int d1 = 0, d2 = 0;
  int dd1 = 0, dd2 = 0;
  int f1 = 0, f2 = 0;
  int ff1 = 0, ff2 = 0;
  int k1 = 0, k2 = 0;
  int n1 = 0, n2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &dd1, &n1, &f1, &ff1, &k1);
  int16_t res2 = sscanf(str, format, &d2, &dd2, &n2, &f2, &ff2, &k2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(d1, d2);
  ck_assert_int_eq(dd1, dd2);
  ck_assert_int_eq(f1, f2);
  ck_assert_int_eq(ff1, ff2);
  ck_assert_int_eq(k1, k2);
  ck_assert_int_eq(n1, n2);

#test sscanf_n_4
  char format[] = "Hello %n ";
  char str[] = "Hello";
  int *pn1 = 0, *pn2 = 0;

  int16_t res1 = s21_sscanf(str, format, &pn1);
  int16_t res2 = sscanf(str, format, &pn2);
  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(pn1, pn2);

#test sscanf_n_5
  char format[] = "%d %hn %d %hhn %d %d %hhn %d";
  char str[] = "80 50 70 371 327";
  int d1 = 0, d2 = 0;
  int dd1 = 0, dd2 = 0;
  int f1 = 0, f2 = 0;
  int ff1 = 0, ff2 = 0;
  int k1 = 0, k2 = 0;
  short hn1 = 0, hn2 = 0;
  unsigned char hhn1 = 0, hhn2 = 0;
  unsigned char n_val1 = 0, n_val2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &hn1, &dd1, &hhn1, &f1, &ff1, &n_val1, &k1);
  int16_t res2 = sscanf(str, format, &d2, &hn2, &dd2, &hhn2, &f2, &ff2, &n_val2, &k2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(d1, d2);
  ck_assert_int_eq(dd1, dd2);
  ck_assert_int_eq(f1, f2);
  ck_assert_int_eq(ff1, ff2);
  ck_assert_int_eq(k1, k2);
  ck_assert_int_eq(n_val1, n_val2);
  ck_assert_int_eq(hn1, hn2);
  ck_assert_int_eq(hhn1, hhn2);

#test sscanf_n_6
  char format[] = "%d %ln %d %lln %d %d %lln %d";
  char str[] = "3263 225 724 38 482";
  int d1 = 0, d2 = 0;
  int dd1 = 0, dd2 = 0;
  int f1 = 0, f2 = 0;
  int ff1 = 0, ff2 = 0;
  int k1 = 0, k2 = 0;
  long int hn1 = 0, hn2 = 0;
  long long int hhn1 = 0, hhn2 = 0;
  long long int n_ll1 = 0, n_ll2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &hn1, &dd1, &hhn1, &f1, &ff1, &n_ll1, &k1);
  int16_t res2 = sscanf(str, format, &d2, &hn2, &dd2, &hhn2, &f2, &ff2, &n_ll2, &k2);
  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(d1, d2);
  ck_assert_int_eq(dd1, dd2);
  ck_assert_int_eq(f1, f2);
  ck_assert_int_eq(ff1, ff2);
  ck_assert_int_eq(k1, k2);
  ck_assert_int_eq(n_ll1, n_ll2);
  ck_assert_int_eq(hn1, hn2);
  ck_assert_int_eq(hhn1, hhn2);

#test sscanf_n_7
  char format[] = "%%%c";
  char str[] = "%p";
  char c1 = 0, c2 = 0;

  int16_t res1 = s21_sscanf(str, format, &c1);
  int16_t res2 = sscanf(str, format, &c2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(res1, res2);

#test sscanf_n_8
  char format[] = "%s %n %s %n %s %s %s %n";
  char str[] = "Hello, my name is Jinny";
  char s1[30], s2[30], s3[30], s4[30], s5[30], s6[30], s7[30], s8[30], s9[30], s10[30];
  int n1 = 0, n2 = 0;
  int hn1 = 0, hn2 = 0;
  int hhn1 = 0, hhn2 = 0;

  int16_t res1 = s21_sscanf(str, format, &s1, &hn1, &s3, &hhn1, &s5, &s7, &s9, &n1);
  int16_t res2 = sscanf(str, format, &s2, &hn2, &s4, &hhn2, &s6, &s8, &s10, &n2);
  ck_assert_int_eq(res1, res2);
  ck_assert_pstr_eq(s1, s2);
  ck_assert_pstr_eq(s3, s4);
  ck_assert_pstr_eq(s5, s6);
  ck_assert_pstr_eq(s7, s8);
  ck_assert_pstr_eq(s9, s10);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(hn1, hn2);
  ck_assert_int_eq(hhn1, hhn2);

#test sscanf_n_9
  char format[] = "%lf %lf %lf %lf %n %lf";
  char str[] = ".0 66.34 9877.66 1.99 0.999";
  long double d1 = 0, d2 = 0;
  long double dd1 = 0, dd2 = 0;
  long double f1 = 0, f2 = 0;
  long double ff1 = 0, ff2 = 0;
  long double k1 = 0, k2 = 0;
  int n1 = 0, n2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &dd1, &f1, &ff1, &n1, &k1);
  int16_t res2 = sscanf(str, format, &d2, &dd2, &f2, &ff2, &n2, &k2);
  ck_assert_ldouble_eq(res1, res2);
  ck_assert_ldouble_eq(d1, d2);
  ck_assert_ldouble_eq(dd1, dd2);
  ck_assert_ldouble_eq(f1, f2);
  ck_assert_ldouble_eq(ff1, ff2);
  ck_assert_ldouble_eq(k1, k2);
  ck_assert_int_eq(n1, n2);

#test sscanf_n_10
  char format[] = "%s %s";
  char str[] = "hi \t\n";
  char s1[20], s2[20] = {0}, s3[20], s4[20] = {0};

  int16_t res1 = s21_sscanf(str, format, s1, s2);
  int16_t res2 = sscanf(str, format, s3, s4);
  ck_assert_ldouble_eq(res1, res2);
  ck_assert_pstr_eq(s1, s3);
  ck_assert_pstr_eq(s2, s4);


#test sscanf_i_1
  char format[] = "%hhi%hhi%hhi";
  char str[] = "123 +198 -87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_2
  char format[] = "%hhi %hhi %hhi";
  char str[] = "123 +198 -87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_3
  char format[] = "%1hhi %1hhi %1hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_4
  char format[] = "%2hhi %2hhi %2hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_5
  char format[] = "%3hhi %3hhi %3hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_6
  char format[] = "%30hhi %24hhi %21hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_7
  char format[] = "%hhi %hhi %hhi %hhi";
  char str[] = "2147483647 +2147483648 -2147483648 -2147483649";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;
  unsigned char w1, w2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
  ck_assert_uint_eq(w1, w2);

#test sscanf_i_8
  char format[] = "%hhi %hhi %hhi %hhi";
  char str[] =
      "9223372036854775807 +9223372036854775808 -9223372036854775808 "
      "-9223372036854775809";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;
  unsigned char w1, w2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
  ck_assert_uint_eq(w1, w2);

#test sscanf_i_9
  char format[] = "%hhi%hhi%hhi";
  char str[] = "0123 +0198 -087";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

//////////////////////////////////
#test sscanf_i_10

  char format[] = "%hhi %hhi %hhi";
  char str[] = "0123 +0198 -087";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_11

  char format[] = "%1hhi %1hhi %1hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_12

  char format[] = "%2hhi %2hhi %2hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_13

  char format[] = "%3hhi %3hhi %3hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);

#test sscanf_i_14

  char format[] = "%30hhi %24hhi %21hhi";
  char str[] = "13 +137 -8";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_15

  char format[] = "%hhi %hhi %hhi %hhi";
  char str[] = "2147483647 +2147483648 -2147483648 -2147483649";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;
  unsigned char w1, w2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
  ck_assert_uint_eq(w1, w2);


#test sscanf_i_16

  char format[] = "%hhi %hhi %hhi %hhi";
  char str[] =
    "01777777777777777777777 +02000000000000000000000 "
    "-02000000000000000000000 -02000000000000000000001";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;
  unsigned char w1, w2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);
  ck_assert_uint_eq(w1, w2);


#test sscanf_i_17

  char format[] = "%hhi%hhi%%hhi";
  char str[] = "0x123 +0X198 -0x87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_18

  char format[] = "%hhi %hhi %hhi";
  char str[] = "0X123 +0x198 -0X87";
  unsigned char d1, d2;
  unsigned char q1, q2;
  unsigned char z1, z2;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


#test sscanf_i_19

  char format[] = "%1hhi %1hhi %1hhi";
  char str[] = "0X123 +0x137 -0x8";
  unsigned char d1 = 0, d2 = 0;
  unsigned char q1 = 0, q2 = 0;
  unsigned char z1 = 0, z2 = 0;

  int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
  int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
  ck_assert_int_eq(res1, res2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_uint_eq(q1, q2);
  ck_assert_uint_eq(z1, z2);


  //////////////////////////////////

#test sscanf_i_20
char format[] = "%3hhi %3hhi %3hhi";
char str[] = "0x13 +0x137 -0x8";
unsigned char d1, d2;
unsigned char q1, q2;
unsigned char z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_21
char format[] = "%30hhi %24hhi %21hhi";
char str[] = "0x13 +0x1a -0x8";
unsigned char d1, d2;
unsigned char q1, q2;
unsigned char z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_22
char format[] = "%hhi %hhi %hhi %hhi";
char str[] = "0xffffffff +0xffffffeab -0xFfFfffFf -0x39cdb3aa";
unsigned char d1, d2;
unsigned char q1, q2;
unsigned char z1, z2;
unsigned char w1, w2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);
ck_assert_uint_eq(w1, w2);

#test sscanf_i_23
char format[] = "%hhi %hhi %hhi %hhi";
char str[] =
    "0xFFFFFFFFFFFFFFFF 0x8000000000000000 -0xFFFFFFFFFFFFFFFF "
    "-0x348923848239742389328";
unsigned char d1, d2;
unsigned char q1, q2;
unsigned char z1, z2;
unsigned char w1, w2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);
ck_assert_uint_eq(w1, w2);

#test sscanf_i_24
char format[] = "%hi%hi%hi";
char str[] = "123 +198 -87";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_25
char format[] = "%hi %hi %hi";
char str[] = "123 +198 -87";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_26
char format[] = "%1hi %1hi %1hi";
char str[] = "13 +137 -8";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1 = 0, z2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_27
char format[] = "%2hi %2hi %2hi";
char str[] = "13 +137 -8";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_28
char format[] = "%3hi %3hi %3hi";
char str[] = "13 +137 -8";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_29
char format[] = "%30hi %24hi %21hi";
char str[] = "13 +137 -8";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_30
char format[] = "%hi %hi %hi %hi";
char str[] = "2147483647 +2147483648 -2147483648 -2147483649";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
unsigned short w1, w2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);
ck_assert_uint_eq(w1, w2);

#test sscanf_i_31
char format[] = "%hi %hi %hi %hi";
char str[] =
    "9223372036854775807 +9223372036854775808 -9223372036854775808 -9223372036854775809";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
unsigned short w1, w2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1, &w1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2, &w2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);
ck_assert_uint_eq(w1, w2);

#test sscanf_i_32
char format[] = "%hi%hi%hi";
char str[] = "0x123 +0X198 -0x87";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_33
char format[] = "%hi %hi %hi";
char str[] = "0X123 +0x198 -0X87";
unsigned short d1, d2;
unsigned short q1, q2;
unsigned short z1, z2;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);

#test sscanf_i_34
char format[] = "%1hi %1hi %1hi";
char str[] = "0X123 +0x137 -0x8";
unsigned short d1 = 0, d2 = 0;
unsigned short q1 = 0, q2 = 0;
unsigned short z1 = 0, z2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1, &q1, &z1);
int16_t res2 = sscanf(str, format, &d2, &q2, &z2);
ck_assert_int_eq(res1, res2);
ck_assert_uint_eq(d1, d2);
ck_assert_uint_eq(q1, q2);
ck_assert_uint_eq(z1, z2);


#test sscanf_empty_1
char format[] = "%d";
char str[] = "";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_2
char format[] = "%d";
char str[] = "     ";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_3
char format[] = "%d";
char str[] = "\n";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_4
char format[] = "%d";
char str[] = "\t";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_5
char format[] = "%d";
char str[] = "\t\n\n   \n  \t";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_6
char format[] = "";
char str[] = "\t\n\n   \n  \t";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);

#test sscanf_empty_7
char format[] = "\t";
char str[] = "\t\n\n   \n  \t";
int p1, p2;
int16_t res1 = s21_sscanf(str, format, &p1);
int16_t res2 = sscanf(str, format, &p2);
ck_assert_int_eq(res1, res2);


#test sscanf_d_1
char format[] = "%hhd";
char str[] = "123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_2
char format[] = "%hhd";
char str[] = "-123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_3
char format[] = "%hhd";
char str[] = "+123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_4
char format[] = "%3hhd";
char str[] = "-123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_5
char format[] = "%4hhd";
char str[] = "-123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_6
char format[] = "%10hhd";
char str[] = "-123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_7
char format[] = "%1hhd";
char str[] = "-123";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_8
char format[] = "%3hhd";
char str[] = "+123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_9
char format[] = "%4hhd";
char str[] = "+123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_10
char format[] = "%10hhd";
char str[] = "+123";
signed char d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_11
char format[] = "%1hhd";
char str[] = "+123";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_12
char format[] = "%*1hhd";
char str[] = "+123";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_13
char format[] = "%*hhd";
char str[] = "123";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_14
char format[] = "%hhd";
char str[] = "2147483647";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_15
char format[] = "%hhd";
char str[] = "+2147483648";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_16
char format[] = "%hhd";
char str[] = "214743483648";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_17
char format[] = "%hhd";
char str[] = "-2147483648";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_18
char format[] = "%hhd";
char str[] = "-2147483649";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_19
char format[] = "%hhd";
char str[] = "-214748364239";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_20
char format[] = "%hhd";
char str[] = "−9223372036854775808";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_21
char format[] = "%hhd";
char str[] = "−9223372036854775809";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_22
char format[] = "%hhd";
char str[] = "−922337203685477582309";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_23
char format[] = "%hhd";
char str[] = "9223372036854775807";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_24
char format[] = "%hhd";
char str[] = "9223372036854775808";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_25
char format[] = "%hhd";
char str[] = "922337203685477582309";
signed char d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_26
char format[] = "%d";
char str[] = "123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_27
char format[] = "%d";
char str[] = "-123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_28
char format[] = "%d";
char str[] = "+123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_29
char format[] = "%3d";
char str[] = "-123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_30
char format[] = "%4d";
char str[] = "-123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_31
char format[] = "%10d";
char str[] = "-123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

//////////////////////////////////////////
#test sscanf_d_32
char format[] = "%3d";
char str[] = "+123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_33
char format[] = "%4d";
char str[] = "+123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_34
char format[] = "%10d";
char str[] = "+123";
int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_35
char format[] = "%1d";
char str[] = "+123";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_36
char format[] = "%*1d";
char str[] = "+123";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_37
char format[] = "%*d";
char str[] = "123";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_38
char format[] = "%d";
char str[] = "2147483647";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_39
char format[] = "%d";
char str[] = "+2147483648";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_40
char format[] = "%d";
char str[] = "214743483648";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_41
char format[] = "%d";
char str[] = "-2147483648";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_42
char format[] = "%d";
char str[] = "-2147483649";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_43
char format[] = "%d";
char str[] = "-214748364239";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_44
char format[] = "%d";
char str[] = "−9223372036854775808";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_45
char format[] = "%d";
char str[] = "−9223372036854775809";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_46
char format[] = "%d";
char str[] = "−922337203685477582309";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_47
char format[] = "%d";
char str[] = "9223372036854775807";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_48
char format[] = "%d";
char str[] = "9223372036854775808";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_49
char format[] = "%d";
char str[] = "922337203685477582309";
int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_50
char format[] = "%ld";
char str[] = "123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_51
char format[] = "%ld";
char str[] = "-123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_52
char format[] = "%ld";
char str[] = "+123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_53
char format[] = "%3ld";
char str[] = "-123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_54
char format[] = "%4ld";
char str[] = "-123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_55
char format[] = "%10ld";
char str[] = "-123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_56
char format[] = "%1ld";
char str[] = "-123";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_57
char format[] = "%3ld";
char str[] = "+123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_58
char format[] = "%4ld";
char str[] = "+123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_59
char format[] = "%10ld";
char str[] = "+123";
long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_60
char format[] = "%1ld";
char str[] = "+123";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_61
char format[] = "%*1ld";
char str[] = "+123";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_62
char format[] = "%*ld";
char str[] = "123";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_63
char format[] = "%ld";
char str[] = "2147483647";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_64
char format[] = "%ld";
char str[] = "+2147483648";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_65
char format[] = "%ld";
char str[] = "214743483648";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_66
char format[] = "%ld";
char str[] = "-2147483648";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_67
char format[] = "%ld";
char str[] = "-2147483649";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_68
char format[] = "%ld";
char str[] = "-214748364239";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_69
char format[] = "%ld";
char str[] = "−9223372036854775808";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_70
char format[] = "%ld";
char str[] = "−9223372036854775809";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_71
char format[] = "%ld";
char str[] = "−922337203685477582309";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_72
char format[] = "%ld";
char str[] = "9223372036854775807";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_73
char format[] = "%ld";
char str[] = "9223372036854775808";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_74
char format[] = "%ld";
char str[] = "922337203685477582309";
long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_75
char format[] = "%lld";
char str[] = "123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_76
char format[] = "%lld";
char str[] = "-123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_77
char format[] = "%lld";
char str[] = "+123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_78
char format[] = "%3lld";
char str[] = "-123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_79
char format[] = "%4lld";
char str[] = "-123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_80
char format[] = "%10lld";
char str[] = "-123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_d_81
char format[] = "%1lld";
char str[] = "-123";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);




/////////////////////////////////
 #test sscanf_ll_82
char format[] = "%3lld";
char str[] = "+123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_83
char format[] = "%4lld";
char str[] = "+123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_84
char format[] = "%10lld";
char str[] = "+123";
long long int d1, d2;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_85
char format[] = "%1lld";
char str[] = "+123";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_86
char format[] = "%*1lld";
char str[] = "+123";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_87
char format[] = "%*lld";
char str[] = "123";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_88
char format[] = "%lld";
char str[] = "2147483647";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_89
char format[] = "%lld";
char str[] = "+2147483648";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_90
char format[] = "%lld";
char str[] = "214743483648";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_91
char format[] = "%lld";
char str[] = "-2147483648";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_92
char format[] = "%lld";
char str[] = "-2147483649";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_93
char format[] = "%lld";
char str[] = "-214748364239";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_94
char format[] = "%lld";
char str[] = "−9223372036854775808";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_95
char format[] = "%lld";
char str[] = "−9223372036854775809";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_96
char format[] = "%lld";
char str[] = "−922337203685477582309";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_97
char format[] = "%lld";
char str[] = "9223372036854775807";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_98
char format[] = "%lld";
char str[] = "9223372036854775808";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);

#test sscanf_ll_99
char format[] = "%lld";
char str[] = "922337203685477582309";
long long int d1 = 0, d2 = 0;
int16_t res1 = s21_sscanf(str, format, &d1);
int16_t res2 = sscanf(str, format, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(d1, d2);


#test sscanf_test_475
    char format[]="%0LX";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);

#test sscanf_test_1447
    char format[]="%le";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1448
    char format[]="%le";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1449
    char format[]="%le";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1450
    char format[]="%le";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1451
    char format[]="%le";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1452
    char format[]="%le";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1453
    char format[]="%le";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1454
    char format[]="%le";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1455
    char format[]="%le";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1456
    char format[]="%le";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1457
    char format[]="%le";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1458
    char format[]="%le";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1459
    char format[]="%le";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1460
    char format[]="%le";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1461
    char format[]="%le";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1462
    char format[]="%le";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1463
    char format[]="%le";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1464
    char format[]="%le";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1465
    char format[]="%lE";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1466
    char format[]="%lE";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1467
    char format[]="%lE";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1468
    char format[]="%lE";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1469
    char format[]="%lE";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1470
    char format[]="%lE";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1471
    char format[]="%lE";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1472
    char format[]="%lE";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1473
    char format[]="%lE";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1474
    char format[]="%lE";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1475
    char format[]="%lE";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1476
    char format[]="%lE";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1477
    char format[]="%lE";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1478
    char format[]="%lE";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1479
    char format[]="%lE";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1480
    char format[]="%lE";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1481
    char format[]="%lE";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1482
    char format[]="%lE";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1483
    char format[]="%lE";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1484
    char format[]="%lE";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1485
    char format[]="%lE";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1486
    char format[]="%lE";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1487
    char format[]="%lE";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1488
    char format[]="%lE";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1489
    char format[]="%lg";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1490
    char format[]="%lg";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1491
    char format[]="%lg";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1492
    char format[]="%lg";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1493
    char format[]="%lg";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1494
    char format[]="%lg";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1495
    char format[]="%lg";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1496
    char format[]="%lg";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1497
    char format[]="%lg";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1498
    char format[]="%lg";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1499
    char format[]="%lg";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1500
    char format[]="%lg";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1501
    char format[]="%lg";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1502
    char format[]="%lg";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1503
    char format[]="%lg";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1504
    char format[]="%lg";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1505
    char format[]="%lg";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1506
    char format[]="%lg";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1507
    char format[]="%lg";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1508
    char format[]="%lg";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1509
    char format[]="%lg";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1510
    char format[]="%lg";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1511
    char format[]="%lg";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1512
    char format[]="%lg";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1513
    char format[]="%lG";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1514
    char format[]="%lG";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1515
    char format[]="%lG";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1516
    char format[]="%lG";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1517
    char format[]="%lG";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1518
    char format[]="%lG";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1519
    char format[]="%lG";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1520
    char format[]="%lG";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1521
    char format[]="%lG";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1522
    char format[]="%lG";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1523
    char format[]="%lG";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1524
    char format[]="%lG";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1525
    char format[]="%lG";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1526
    char format[]="%lG";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1527
    char format[]="%lG";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1528
    char format[]="%lG";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1529
    char format[]="%lG";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1530
    char format[]="%lG";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1531
    char format[]="%lG";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1532
    char format[]="%lG";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1533
    char format[]="%lG";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1534
    char format[]="%lG";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1535
    char format[]="%lG";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1536
    char format[]="%lG";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1537
    char format[]="%lf";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1538
    char format[]="%lf";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1539
    char format[]="%lf";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1540
    char format[]="%lf";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1541
    char format[]="%lf";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1542
    char format[]="%lf";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1543
    char format[]="%lf";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1544
    char format[]="%lf";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1545
    char format[]="%lf";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1546
    char format[]="%lf";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1547
    char format[]="%lf";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1548
    char format[]="%lf";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1549
    char format[]="%lf";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1550
    char format[]="%lf";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1551
    char format[]="%lf";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1552
    char format[]="%lf";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1553
    char format[]="%lf";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1554
    char format[]="%lf";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1555
    char format[]="%lf";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1556
    char format[]="%lf";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1557
    char format[]="%lf";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1558
    char format[]="%lf";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1559
    char format[]="%lf";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1560
    char format[]="%lf";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1561
    char format[]="%Le";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1562
    char format[]="%Le";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1563
    char format[]="%Le";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1564
    char format[]="%Le";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1565
    char format[]="%Le";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1566
    char format[]="%Le";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1567
    char format[]="%Le";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1568
    char format[]="%Le";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1569
    char format[]="%Le";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1570
    char format[]="%Le";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1571
    char format[]="%Le";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1572
    char format[]="%Le";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1573
    char format[]="%Le";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1574
    char format[]="%Le";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1575
    char format[]="%Le";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1576
    char format[]="%Le";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1577
    char format[]="%Le";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1578
    char format[]="%Le";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1579
    char format[]="%Le";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1580
    char format[]="%Le";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1581
    char format[]="%Le";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1582
    char format[]="%Le";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1583
    char format[]="%Le";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1584
    char format[]="%Le";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1585
    char format[]="%LE";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1586
    char format[]="%LE";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1587
    char format[]="%LE";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1588
    char format[]="%LE";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1589
    char format[]="%LE";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1590
    char format[]="%LE";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1591
    char format[]="%LE";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1592
    char format[]="%LE";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1593
    char format[]="%LE";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1594
    char format[]="%LE";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1595
    char format[]="%LE";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1596
    char format[]="%LE";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1597
    char format[]="%LE";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1598
    char format[]="%LE";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1599
    char format[]="%LE";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1600
    char format[]="%LE";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1601
    char format[]="%LE";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1602
    char format[]="%LE";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1603
    char format[]="%LE";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1604
    char format[]="%LE";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1605
    char format[]="%LE";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1606
    char format[]="%LE";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1607
    char format[]="%LE";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1608
    char format[]="%LE";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1609
    char format[]="%Lg";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1610
    char format[]="%Lg";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1611
    char format[]="%Lg";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1612
    char format[]="%Lg";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1613
    char format[]="%Lg";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1614
    char format[]="%Lg";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1615
    char format[]="%Lg";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1616
    char format[]="%Lg";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1617
    char format[]="%Lg";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1618
    char format[]="%Lg";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1619
    char format[]="%Lg";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1620
    char format[]="%Lg";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1621
    char format[]="%Lg";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1622
    char format[]="%Lg";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1623
    char format[]="%Lg";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1624
    char format[]="%Lg";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1625
    char format[]="%Lg";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1626
    char format[]="%Lg";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1627
    char format[]="%Lg";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1628
    char format[]="%Lg";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1629
    char format[]="%Lg";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1630
    char format[]="%Lg";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1631
    char format[]="%Lg";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1632
    char format[]="%Lg";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1633
    char format[]="%LG";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1634
    char format[]="%LG";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1635
    char format[]="%LG";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1636
    char format[]="%LG";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1637
    char format[]="%LG";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1638
    char format[]="%LG";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1639
    char format[]="%LG";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1640
    char format[]="%LG";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1641
    char format[]="%LG";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1642
    char format[]="%LG";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1643
    char format[]="%LG";
    char string[] = "inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1644
    char format[]="%LG";
    char string[] = "-INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1645
    char format[]="%LG";
    char string[] = "-inf";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1646
    char format[]="%LG";
    char string[] = "INFINITY";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1647
    char format[]="%LG";
    char string[] = "nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1648
    char format[]="%LG";
    char string[] = "NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1649
    char format[]="%LG";
    char string[] = "-nan";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1650
    char format[]="%LG";
    char string[] = "-NAN";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1651
    char format[]="%LG";
    char string[] = "1024p-4";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1652
    char format[]="%LG";
    char string[] = ".1e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1653
    char format[]="%LG";
    char string[] = ".p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1654
    char format[]="%LG";
    char string[] = "0xe1";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1655
    char format[]="%LG";
    char string[] = "0x.e5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1656
    char format[]="%LG";
    char string[] = "-0x.p5";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1657
    char format[]="%Lf";
    char string[] = "0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1658
    char format[]="%Lf";
    char string[] = "-0";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1659
    char format[]="%Lf";
    char string[] = "-123";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1660
    char format[]="%Lf";
    char string[] = "0xffffffffffffffff.e2";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1661
    char format[]="%Lf";
    char string[] = "-.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1662
    char format[]="%Lf";
    char string[] = "0x";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1663
    char format[]="%Lf";
    char string[] = "0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1664
    char format[]="%Lf";
    char string[] = "-0x.";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1665
    char format[]="%Lf";
    char string[] = "0216124318.555";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);
#test sscanf_test_1666
    char format[]="%Lf";
    char string[] = "6464948.13E+14";
    memset(buf_std, 0xFF, BUF_SIZE1);
    memset(buf_s21, 0xFF, BUF_SIZE1);
    TEST_SSCANF(string, format, buf_s21, buf_std);